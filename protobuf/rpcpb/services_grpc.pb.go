// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: rpcpb/services.proto

package rpcpb

import (
	context "context"
	clientpb "github.com/starkzarn/glod/protobuf/clientpb"
	commonpb "github.com/starkzarn/glod/protobuf/commonpb"
	glodpb "github.com/starkzarn/glod/protobuf/glodpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SliverRPC_GetVersion_FullMethodName                       = "/rpcpb.SliverRPC/GetVersion"
	SliverRPC_GetOperators_FullMethodName                     = "/rpcpb.SliverRPC/GetOperators"
	SliverRPC_Kill_FullMethodName                             = "/rpcpb.SliverRPC/Kill"
	SliverRPC_Reconfigure_FullMethodName                      = "/rpcpb.SliverRPC/Reconfigure"
	SliverRPC_Rename_FullMethodName                           = "/rpcpb.SliverRPC/Rename"
	SliverRPC_GetSessions_FullMethodName                      = "/rpcpb.SliverRPC/GetSessions"
	SliverRPC_GetBeacons_FullMethodName                       = "/rpcpb.SliverRPC/GetBeacons"
	SliverRPC_GetBeacon_FullMethodName                        = "/rpcpb.SliverRPC/GetBeacon"
	SliverRPC_RmBeacon_FullMethodName                         = "/rpcpb.SliverRPC/RmBeacon"
	SliverRPC_GetBeaconTasks_FullMethodName                   = "/rpcpb.SliverRPC/GetBeaconTasks"
	SliverRPC_GetBeaconTaskContent_FullMethodName             = "/rpcpb.SliverRPC/GetBeaconTaskContent"
	SliverRPC_CancelBeaconTask_FullMethodName                 = "/rpcpb.SliverRPC/CancelBeaconTask"
	SliverRPC_MonitorStart_FullMethodName                     = "/rpcpb.SliverRPC/MonitorStart"
	SliverRPC_MonitorStop_FullMethodName                      = "/rpcpb.SliverRPC/MonitorStop"
	SliverRPC_GetJobs_FullMethodName                          = "/rpcpb.SliverRPC/GetJobs"
	SliverRPC_KillJob_FullMethodName                          = "/rpcpb.SliverRPC/KillJob"
	SliverRPC_StartMTLSListener_FullMethodName                = "/rpcpb.SliverRPC/StartMTLSListener"
	SliverRPC_StartWGListener_FullMethodName                  = "/rpcpb.SliverRPC/StartWGListener"
	SliverRPC_StartDNSListener_FullMethodName                 = "/rpcpb.SliverRPC/StartDNSListener"
	SliverRPC_StartHTTPSListener_FullMethodName               = "/rpcpb.SliverRPC/StartHTTPSListener"
	SliverRPC_StartHTTPListener_FullMethodName                = "/rpcpb.SliverRPC/StartHTTPListener"
	SliverRPC_StartTCPStagerListener_FullMethodName           = "/rpcpb.SliverRPC/StartTCPStagerListener"
	SliverRPC_StartHTTPStagerListener_FullMethodName          = "/rpcpb.SliverRPC/StartHTTPStagerListener"
	SliverRPC_LootAdd_FullMethodName                          = "/rpcpb.SliverRPC/LootAdd"
	SliverRPC_LootRm_FullMethodName                           = "/rpcpb.SliverRPC/LootRm"
	SliverRPC_LootUpdate_FullMethodName                       = "/rpcpb.SliverRPC/LootUpdate"
	SliverRPC_LootContent_FullMethodName                      = "/rpcpb.SliverRPC/LootContent"
	SliverRPC_LootAll_FullMethodName                          = "/rpcpb.SliverRPC/LootAll"
	SliverRPC_LootAllOf_FullMethodName                        = "/rpcpb.SliverRPC/LootAllOf"
	SliverRPC_Hosts_FullMethodName                            = "/rpcpb.SliverRPC/Hosts"
	SliverRPC_Host_FullMethodName                             = "/rpcpb.SliverRPC/Host"
	SliverRPC_HostRm_FullMethodName                           = "/rpcpb.SliverRPC/HostRm"
	SliverRPC_HostIOCRm_FullMethodName                        = "/rpcpb.SliverRPC/HostIOCRm"
	SliverRPC_Generate_FullMethodName                         = "/rpcpb.SliverRPC/Generate"
	SliverRPC_GenerateExternal_FullMethodName                 = "/rpcpb.SliverRPC/GenerateExternal"
	SliverRPC_GenerateExternalSaveBuild_FullMethodName        = "/rpcpb.SliverRPC/GenerateExternalSaveBuild"
	SliverRPC_GenerateExternalGetImplantConfig_FullMethodName = "/rpcpb.SliverRPC/GenerateExternalGetImplantConfig"
	SliverRPC_BuilderRegister_FullMethodName                  = "/rpcpb.SliverRPC/BuilderRegister"
	SliverRPC_BuilderTrigger_FullMethodName                   = "/rpcpb.SliverRPC/BuilderTrigger"
	SliverRPC_Builders_FullMethodName                         = "/rpcpb.SliverRPC/Builders"
	SliverRPC_Regenerate_FullMethodName                       = "/rpcpb.SliverRPC/Regenerate"
	SliverRPC_ImplantBuilds_FullMethodName                    = "/rpcpb.SliverRPC/ImplantBuilds"
	SliverRPC_DeleteImplantBuild_FullMethodName               = "/rpcpb.SliverRPC/DeleteImplantBuild"
	SliverRPC_Canaries_FullMethodName                         = "/rpcpb.SliverRPC/Canaries"
	SliverRPC_GenerateWGClientConfig_FullMethodName           = "/rpcpb.SliverRPC/GenerateWGClientConfig"
	SliverRPC_GenerateUniqueIP_FullMethodName                 = "/rpcpb.SliverRPC/GenerateUniqueIP"
	SliverRPC_ImplantProfiles_FullMethodName                  = "/rpcpb.SliverRPC/ImplantProfiles"
	SliverRPC_DeleteImplantProfile_FullMethodName             = "/rpcpb.SliverRPC/DeleteImplantProfile"
	SliverRPC_SaveImplantProfile_FullMethodName               = "/rpcpb.SliverRPC/SaveImplantProfile"
	SliverRPC_MsfStage_FullMethodName                         = "/rpcpb.SliverRPC/MsfStage"
	SliverRPC_ShellcodeRDI_FullMethodName                     = "/rpcpb.SliverRPC/ShellcodeRDI"
	SliverRPC_GetCompiler_FullMethodName                      = "/rpcpb.SliverRPC/GetCompiler"
	SliverRPC_ShellcodeEncoder_FullMethodName                 = "/rpcpb.SliverRPC/ShellcodeEncoder"
	SliverRPC_ShellcodeEncoderMap_FullMethodName              = "/rpcpb.SliverRPC/ShellcodeEncoderMap"
	SliverRPC_Websites_FullMethodName                         = "/rpcpb.SliverRPC/Websites"
	SliverRPC_Website_FullMethodName                          = "/rpcpb.SliverRPC/Website"
	SliverRPC_WebsiteRemove_FullMethodName                    = "/rpcpb.SliverRPC/WebsiteRemove"
	SliverRPC_WebsiteAddContent_FullMethodName                = "/rpcpb.SliverRPC/WebsiteAddContent"
	SliverRPC_WebsiteUpdateContent_FullMethodName             = "/rpcpb.SliverRPC/WebsiteUpdateContent"
	SliverRPC_WebsiteRemoveContent_FullMethodName             = "/rpcpb.SliverRPC/WebsiteRemoveContent"
	SliverRPC_Ping_FullMethodName                             = "/rpcpb.SliverRPC/Ping"
	SliverRPC_Ps_FullMethodName                               = "/rpcpb.SliverRPC/Ps"
	SliverRPC_Terminate_FullMethodName                        = "/rpcpb.SliverRPC/Terminate"
	SliverRPC_Ifconfig_FullMethodName                         = "/rpcpb.SliverRPC/Ifconfig"
	SliverRPC_Netstat_FullMethodName                          = "/rpcpb.SliverRPC/Netstat"
	SliverRPC_Ls_FullMethodName                               = "/rpcpb.SliverRPC/Ls"
	SliverRPC_Cd_FullMethodName                               = "/rpcpb.SliverRPC/Cd"
	SliverRPC_Pwd_FullMethodName                              = "/rpcpb.SliverRPC/Pwd"
	SliverRPC_Mv_FullMethodName                               = "/rpcpb.SliverRPC/Mv"
	SliverRPC_Rm_FullMethodName                               = "/rpcpb.SliverRPC/Rm"
	SliverRPC_Mkdir_FullMethodName                            = "/rpcpb.SliverRPC/Mkdir"
	SliverRPC_Download_FullMethodName                         = "/rpcpb.SliverRPC/Download"
	SliverRPC_Upload_FullMethodName                           = "/rpcpb.SliverRPC/Upload"
	SliverRPC_Chmod_FullMethodName                            = "/rpcpb.SliverRPC/Chmod"
	SliverRPC_Chown_FullMethodName                            = "/rpcpb.SliverRPC/Chown"
	SliverRPC_Chtimes_FullMethodName                          = "/rpcpb.SliverRPC/Chtimes"
	SliverRPC_MemfilesList_FullMethodName                     = "/rpcpb.SliverRPC/MemfilesList"
	SliverRPC_MemfilesAdd_FullMethodName                      = "/rpcpb.SliverRPC/MemfilesAdd"
	SliverRPC_MemfilesRm_FullMethodName                       = "/rpcpb.SliverRPC/MemfilesRm"
	SliverRPC_ProcessDump_FullMethodName                      = "/rpcpb.SliverRPC/ProcessDump"
	SliverRPC_RunAs_FullMethodName                            = "/rpcpb.SliverRPC/RunAs"
	SliverRPC_Impersonate_FullMethodName                      = "/rpcpb.SliverRPC/Impersonate"
	SliverRPC_RevToSelf_FullMethodName                        = "/rpcpb.SliverRPC/RevToSelf"
	SliverRPC_GetSystem_FullMethodName                        = "/rpcpb.SliverRPC/GetSystem"
	SliverRPC_Task_FullMethodName                             = "/rpcpb.SliverRPC/Task"
	SliverRPC_Msf_FullMethodName                              = "/rpcpb.SliverRPC/Msf"
	SliverRPC_MsfRemote_FullMethodName                        = "/rpcpb.SliverRPC/MsfRemote"
	SliverRPC_ExecuteAssembly_FullMethodName                  = "/rpcpb.SliverRPC/ExecuteAssembly"
	SliverRPC_Migrate_FullMethodName                          = "/rpcpb.SliverRPC/Migrate"
	SliverRPC_Execute_FullMethodName                          = "/rpcpb.SliverRPC/Execute"
	SliverRPC_ExecuteWindows_FullMethodName                   = "/rpcpb.SliverRPC/ExecuteWindows"
	SliverRPC_Sideload_FullMethodName                         = "/rpcpb.SliverRPC/Sideload"
	SliverRPC_SpawnDll_FullMethodName                         = "/rpcpb.SliverRPC/SpawnDll"
	SliverRPC_Screenshot_FullMethodName                       = "/rpcpb.SliverRPC/Screenshot"
	SliverRPC_CurrentTokenOwner_FullMethodName                = "/rpcpb.SliverRPC/CurrentTokenOwner"
	SliverRPC_PivotStartListener_FullMethodName               = "/rpcpb.SliverRPC/PivotStartListener"
	SliverRPC_PivotStopListener_FullMethodName                = "/rpcpb.SliverRPC/PivotStopListener"
	SliverRPC_PivotSessionListeners_FullMethodName            = "/rpcpb.SliverRPC/PivotSessionListeners"
	SliverRPC_PivotGraph_FullMethodName                       = "/rpcpb.SliverRPC/PivotGraph"
	SliverRPC_StartService_FullMethodName                     = "/rpcpb.SliverRPC/StartService"
	SliverRPC_StopService_FullMethodName                      = "/rpcpb.SliverRPC/StopService"
	SliverRPC_RemoveService_FullMethodName                    = "/rpcpb.SliverRPC/RemoveService"
	SliverRPC_MakeToken_FullMethodName                        = "/rpcpb.SliverRPC/MakeToken"
	SliverRPC_GetEnv_FullMethodName                           = "/rpcpb.SliverRPC/GetEnv"
	SliverRPC_SetEnv_FullMethodName                           = "/rpcpb.SliverRPC/SetEnv"
	SliverRPC_UnsetEnv_FullMethodName                         = "/rpcpb.SliverRPC/UnsetEnv"
	SliverRPC_Backdoor_FullMethodName                         = "/rpcpb.SliverRPC/Backdoor"
	SliverRPC_RegistryRead_FullMethodName                     = "/rpcpb.SliverRPC/RegistryRead"
	SliverRPC_RegistryWrite_FullMethodName                    = "/rpcpb.SliverRPC/RegistryWrite"
	SliverRPC_RegistryCreateKey_FullMethodName                = "/rpcpb.SliverRPC/RegistryCreateKey"
	SliverRPC_RegistryDeleteKey_FullMethodName                = "/rpcpb.SliverRPC/RegistryDeleteKey"
	SliverRPC_RegistryListSubKeys_FullMethodName              = "/rpcpb.SliverRPC/RegistryListSubKeys"
	SliverRPC_RegistryListValues_FullMethodName               = "/rpcpb.SliverRPC/RegistryListValues"
	SliverRPC_RunSSHCommand_FullMethodName                    = "/rpcpb.SliverRPC/RunSSHCommand"
	SliverRPC_HijackDLL_FullMethodName                        = "/rpcpb.SliverRPC/HijackDLL"
	SliverRPC_GetPrivs_FullMethodName                         = "/rpcpb.SliverRPC/GetPrivs"
	SliverRPC_StartRportFwdListener_FullMethodName            = "/rpcpb.SliverRPC/StartRportFwdListener"
	SliverRPC_GetRportFwdListeners_FullMethodName             = "/rpcpb.SliverRPC/GetRportFwdListeners"
	SliverRPC_StopRportFwdListener_FullMethodName             = "/rpcpb.SliverRPC/StopRportFwdListener"
	SliverRPC_OpenSession_FullMethodName                      = "/rpcpb.SliverRPC/OpenSession"
	SliverRPC_CloseSession_FullMethodName                     = "/rpcpb.SliverRPC/CloseSession"
	SliverRPC_RegisterExtension_FullMethodName                = "/rpcpb.SliverRPC/RegisterExtension"
	SliverRPC_CallExtension_FullMethodName                    = "/rpcpb.SliverRPC/CallExtension"
	SliverRPC_ListExtensions_FullMethodName                   = "/rpcpb.SliverRPC/ListExtensions"
	SliverRPC_WGStartPortForward_FullMethodName               = "/rpcpb.SliverRPC/WGStartPortForward"
	SliverRPC_WGStopPortForward_FullMethodName                = "/rpcpb.SliverRPC/WGStopPortForward"
	SliverRPC_WGStartSocks_FullMethodName                     = "/rpcpb.SliverRPC/WGStartSocks"
	SliverRPC_WGStopSocks_FullMethodName                      = "/rpcpb.SliverRPC/WGStopSocks"
	SliverRPC_WGListForwarders_FullMethodName                 = "/rpcpb.SliverRPC/WGListForwarders"
	SliverRPC_WGListSocksServers_FullMethodName               = "/rpcpb.SliverRPC/WGListSocksServers"
	SliverRPC_Shell_FullMethodName                            = "/rpcpb.SliverRPC/Shell"
	SliverRPC_Portfwd_FullMethodName                          = "/rpcpb.SliverRPC/Portfwd"
	SliverRPC_CreateSocks_FullMethodName                      = "/rpcpb.SliverRPC/CreateSocks"
	SliverRPC_CloseSocks_FullMethodName                       = "/rpcpb.SliverRPC/CloseSocks"
	SliverRPC_SocksProxy_FullMethodName                       = "/rpcpb.SliverRPC/SocksProxy"
	SliverRPC_CreateTunnel_FullMethodName                     = "/rpcpb.SliverRPC/CreateTunnel"
	SliverRPC_CloseTunnel_FullMethodName                      = "/rpcpb.SliverRPC/CloseTunnel"
	SliverRPC_TunnelData_FullMethodName                       = "/rpcpb.SliverRPC/TunnelData"
	SliverRPC_Events_FullMethodName                           = "/rpcpb.SliverRPC/Events"
)

// SliverRPCClient is the client API for SliverRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SliverRPCClient interface {
	// *** Version ***
	GetVersion(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Version, error)
	// *** Operator Commands ***
	GetOperators(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Operators, error)
	// *** Generic ***
	Kill(ctx context.Context, in *glodpb.KillReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
	Reconfigure(ctx context.Context, in *glodpb.ReconfigureReq, opts ...grpc.CallOption) (*glodpb.Reconfigure, error)
	Rename(ctx context.Context, in *clientpb.RenameReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
	// *** Sessions ***
	GetSessions(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Sessions, error)
	// *** Beacons ***
	GetBeacons(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Beacons, error)
	GetBeacon(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*clientpb.Beacon, error)
	RmBeacon(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*commonpb.Empty, error)
	GetBeaconTasks(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*clientpb.BeaconTasks, error)
	GetBeaconTaskContent(ctx context.Context, in *clientpb.BeaconTask, opts ...grpc.CallOption) (*clientpb.BeaconTask, error)
	CancelBeaconTask(ctx context.Context, in *clientpb.BeaconTask, opts ...grpc.CallOption) (*clientpb.BeaconTask, error)
	// ***Threat monitoring ***
	MonitorStart(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Response, error)
	MonitorStop(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Empty, error)
	// *** Jobs ***
	GetJobs(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Jobs, error)
	KillJob(ctx context.Context, in *clientpb.KillJobReq, opts ...grpc.CallOption) (*clientpb.KillJob, error)
	// *** Listeners ***
	StartMTLSListener(ctx context.Context, in *clientpb.MTLSListenerReq, opts ...grpc.CallOption) (*clientpb.MTLSListener, error)
	StartWGListener(ctx context.Context, in *clientpb.WGListenerReq, opts ...grpc.CallOption) (*clientpb.WGListener, error)
	StartDNSListener(ctx context.Context, in *clientpb.DNSListenerReq, opts ...grpc.CallOption) (*clientpb.DNSListener, error)
	StartHTTPSListener(ctx context.Context, in *clientpb.HTTPListenerReq, opts ...grpc.CallOption) (*clientpb.HTTPListener, error)
	StartHTTPListener(ctx context.Context, in *clientpb.HTTPListenerReq, opts ...grpc.CallOption) (*clientpb.HTTPListener, error)
	// *** Stager Listener ***
	StartTCPStagerListener(ctx context.Context, in *clientpb.StagerListenerReq, opts ...grpc.CallOption) (*clientpb.StagerListener, error)
	StartHTTPStagerListener(ctx context.Context, in *clientpb.StagerListenerReq, opts ...grpc.CallOption) (*clientpb.StagerListener, error)
	// *** Loot ***
	LootAdd(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error)
	LootRm(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*commonpb.Empty, error)
	LootUpdate(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error)
	LootContent(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error)
	LootAll(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.AllLoot, error)
	LootAllOf(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.AllLoot, error)
	// *** Hosts ***
	Hosts(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.AllHosts, error)
	Host(ctx context.Context, in *clientpb.Host, opts ...grpc.CallOption) (*clientpb.Host, error)
	HostRm(ctx context.Context, in *clientpb.Host, opts ...grpc.CallOption) (*commonpb.Empty, error)
	HostIOCRm(ctx context.Context, in *clientpb.IOC, opts ...grpc.CallOption) (*commonpb.Empty, error)
	// *** Implants ***
	Generate(ctx context.Context, in *clientpb.GenerateReq, opts ...grpc.CallOption) (*clientpb.Generate, error)
	GenerateExternal(ctx context.Context, in *clientpb.ExternalGenerateReq, opts ...grpc.CallOption) (*clientpb.ExternalImplantConfig, error)
	GenerateExternalSaveBuild(ctx context.Context, in *clientpb.ExternalImplantBinary, opts ...grpc.CallOption) (*commonpb.Empty, error)
	GenerateExternalGetImplantConfig(ctx context.Context, in *clientpb.ImplantConfig, opts ...grpc.CallOption) (*clientpb.ExternalImplantConfig, error)
	BuilderRegister(ctx context.Context, in *clientpb.Builder, opts ...grpc.CallOption) (SliverRPC_BuilderRegisterClient, error)
	BuilderTrigger(ctx context.Context, in *clientpb.Event, opts ...grpc.CallOption) (*commonpb.Empty, error)
	Builders(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Builders, error)
	Regenerate(ctx context.Context, in *clientpb.RegenerateReq, opts ...grpc.CallOption) (*clientpb.Generate, error)
	ImplantBuilds(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.ImplantBuilds, error)
	DeleteImplantBuild(ctx context.Context, in *clientpb.DeleteReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
	Canaries(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Canaries, error)
	GenerateWGClientConfig(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.WGClientConfig, error)
	GenerateUniqueIP(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.UniqueWGIP, error)
	ImplantProfiles(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.ImplantProfiles, error)
	DeleteImplantProfile(ctx context.Context, in *clientpb.DeleteReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
	SaveImplantProfile(ctx context.Context, in *clientpb.ImplantProfile, opts ...grpc.CallOption) (*clientpb.ImplantProfile, error)
	MsfStage(ctx context.Context, in *clientpb.MsfStagerReq, opts ...grpc.CallOption) (*clientpb.MsfStager, error)
	ShellcodeRDI(ctx context.Context, in *clientpb.ShellcodeRDIReq, opts ...grpc.CallOption) (*clientpb.ShellcodeRDI, error)
	GetCompiler(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Compiler, error)
	ShellcodeEncoder(ctx context.Context, in *clientpb.ShellcodeEncodeReq, opts ...grpc.CallOption) (*clientpb.ShellcodeEncode, error)
	ShellcodeEncoderMap(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.ShellcodeEncoderMap, error)
	// *** Websites ***
	Websites(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Websites, error)
	Website(ctx context.Context, in *clientpb.Website, opts ...grpc.CallOption) (*clientpb.Website, error)
	WebsiteRemove(ctx context.Context, in *clientpb.Website, opts ...grpc.CallOption) (*commonpb.Empty, error)
	WebsiteAddContent(ctx context.Context, in *clientpb.WebsiteAddContent, opts ...grpc.CallOption) (*clientpb.Website, error)
	WebsiteUpdateContent(ctx context.Context, in *clientpb.WebsiteAddContent, opts ...grpc.CallOption) (*clientpb.Website, error)
	WebsiteRemoveContent(ctx context.Context, in *clientpb.WebsiteRemoveContent, opts ...grpc.CallOption) (*clientpb.Website, error)
	// *** Session Interactions ***
	Ping(ctx context.Context, in *glodpb.Ping, opts ...grpc.CallOption) (*glodpb.Ping, error)
	Ps(ctx context.Context, in *glodpb.PsReq, opts ...grpc.CallOption) (*glodpb.Ps, error)
	Terminate(ctx context.Context, in *glodpb.TerminateReq, opts ...grpc.CallOption) (*glodpb.Terminate, error)
	Ifconfig(ctx context.Context, in *glodpb.IfconfigReq, opts ...grpc.CallOption) (*glodpb.Ifconfig, error)
	Netstat(ctx context.Context, in *glodpb.NetstatReq, opts ...grpc.CallOption) (*glodpb.Netstat, error)
	Ls(ctx context.Context, in *glodpb.LsReq, opts ...grpc.CallOption) (*glodpb.Ls, error)
	Cd(ctx context.Context, in *glodpb.CdReq, opts ...grpc.CallOption) (*glodpb.Pwd, error)
	Pwd(ctx context.Context, in *glodpb.PwdReq, opts ...grpc.CallOption) (*glodpb.Pwd, error)
	Mv(ctx context.Context, in *glodpb.MvReq, opts ...grpc.CallOption) (*glodpb.Mv, error)
	Rm(ctx context.Context, in *glodpb.RmReq, opts ...grpc.CallOption) (*glodpb.Rm, error)
	Mkdir(ctx context.Context, in *glodpb.MkdirReq, opts ...grpc.CallOption) (*glodpb.Mkdir, error)
	Download(ctx context.Context, in *glodpb.DownloadReq, opts ...grpc.CallOption) (*glodpb.Download, error)
	Upload(ctx context.Context, in *glodpb.UploadReq, opts ...grpc.CallOption) (*glodpb.Upload, error)
	Chmod(ctx context.Context, in *glodpb.ChmodReq, opts ...grpc.CallOption) (*glodpb.Chmod, error)
	Chown(ctx context.Context, in *glodpb.ChownReq, opts ...grpc.CallOption) (*glodpb.Chown, error)
	Chtimes(ctx context.Context, in *glodpb.ChtimesReq, opts ...grpc.CallOption) (*glodpb.Chtimes, error)
	MemfilesList(ctx context.Context, in *glodpb.MemfilesListReq, opts ...grpc.CallOption) (*glodpb.Ls, error)
	MemfilesAdd(ctx context.Context, in *glodpb.MemfilesAddReq, opts ...grpc.CallOption) (*glodpb.MemfilesAdd, error)
	MemfilesRm(ctx context.Context, in *glodpb.MemfilesRmReq, opts ...grpc.CallOption) (*glodpb.MemfilesRm, error)
	ProcessDump(ctx context.Context, in *glodpb.ProcessDumpReq, opts ...grpc.CallOption) (*glodpb.ProcessDump, error)
	RunAs(ctx context.Context, in *glodpb.RunAsReq, opts ...grpc.CallOption) (*glodpb.RunAs, error)
	Impersonate(ctx context.Context, in *glodpb.ImpersonateReq, opts ...grpc.CallOption) (*glodpb.Impersonate, error)
	RevToSelf(ctx context.Context, in *glodpb.RevToSelfReq, opts ...grpc.CallOption) (*glodpb.RevToSelf, error)
	GetSystem(ctx context.Context, in *clientpb.GetSystemReq, opts ...grpc.CallOption) (*glodpb.GetSystem, error)
	Task(ctx context.Context, in *glodpb.TaskReq, opts ...grpc.CallOption) (*glodpb.Task, error)
	Msf(ctx context.Context, in *clientpb.MSFReq, opts ...grpc.CallOption) (*glodpb.Task, error)
	MsfRemote(ctx context.Context, in *clientpb.MSFRemoteReq, opts ...grpc.CallOption) (*glodpb.Task, error)
	ExecuteAssembly(ctx context.Context, in *glodpb.ExecuteAssemblyReq, opts ...grpc.CallOption) (*glodpb.ExecuteAssembly, error)
	Migrate(ctx context.Context, in *clientpb.MigrateReq, opts ...grpc.CallOption) (*glodpb.Migrate, error)
	Execute(ctx context.Context, in *glodpb.ExecuteReq, opts ...grpc.CallOption) (*glodpb.Execute, error)
	ExecuteWindows(ctx context.Context, in *glodpb.ExecuteWindowsReq, opts ...grpc.CallOption) (*glodpb.Execute, error)
	Sideload(ctx context.Context, in *glodpb.SideloadReq, opts ...grpc.CallOption) (*glodpb.Sideload, error)
	SpawnDll(ctx context.Context, in *glodpb.InvokeSpawnDllReq, opts ...grpc.CallOption) (*glodpb.SpawnDll, error)
	Screenshot(ctx context.Context, in *glodpb.ScreenshotReq, opts ...grpc.CallOption) (*glodpb.Screenshot, error)
	CurrentTokenOwner(ctx context.Context, in *glodpb.CurrentTokenOwnerReq, opts ...grpc.CallOption) (*glodpb.CurrentTokenOwner, error)
	// *** Pivots ***
	PivotStartListener(ctx context.Context, in *glodpb.PivotStartListenerReq, opts ...grpc.CallOption) (*glodpb.PivotListener, error)
	PivotStopListener(ctx context.Context, in *glodpb.PivotStopListenerReq, opts ...grpc.CallOption) (*commonpb.Empty, error)
	PivotSessionListeners(ctx context.Context, in *glodpb.PivotListenersReq, opts ...grpc.CallOption) (*glodpb.PivotListeners, error)
	PivotGraph(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.PivotGraph, error)
	StartService(ctx context.Context, in *glodpb.StartServiceReq, opts ...grpc.CallOption) (*glodpb.ServiceInfo, error)
	StopService(ctx context.Context, in *glodpb.StopServiceReq, opts ...grpc.CallOption) (*glodpb.ServiceInfo, error)
	RemoveService(ctx context.Context, in *glodpb.RemoveServiceReq, opts ...grpc.CallOption) (*glodpb.ServiceInfo, error)
	MakeToken(ctx context.Context, in *glodpb.MakeTokenReq, opts ...grpc.CallOption) (*glodpb.MakeToken, error)
	GetEnv(ctx context.Context, in *glodpb.EnvReq, opts ...grpc.CallOption) (*glodpb.EnvInfo, error)
	SetEnv(ctx context.Context, in *glodpb.SetEnvReq, opts ...grpc.CallOption) (*glodpb.SetEnv, error)
	UnsetEnv(ctx context.Context, in *glodpb.UnsetEnvReq, opts ...grpc.CallOption) (*glodpb.UnsetEnv, error)
	Backdoor(ctx context.Context, in *glodpb.BackdoorReq, opts ...grpc.CallOption) (*glodpb.Backdoor, error)
	RegistryRead(ctx context.Context, in *glodpb.RegistryReadReq, opts ...grpc.CallOption) (*glodpb.RegistryRead, error)
	RegistryWrite(ctx context.Context, in *glodpb.RegistryWriteReq, opts ...grpc.CallOption) (*glodpb.RegistryWrite, error)
	RegistryCreateKey(ctx context.Context, in *glodpb.RegistryCreateKeyReq, opts ...grpc.CallOption) (*glodpb.RegistryCreateKey, error)
	RegistryDeleteKey(ctx context.Context, in *glodpb.RegistryDeleteKeyReq, opts ...grpc.CallOption) (*glodpb.RegistryDeleteKey, error)
	RegistryListSubKeys(ctx context.Context, in *glodpb.RegistrySubKeyListReq, opts ...grpc.CallOption) (*glodpb.RegistrySubKeyList, error)
	RegistryListValues(ctx context.Context, in *glodpb.RegistryListValuesReq, opts ...grpc.CallOption) (*glodpb.RegistryValuesList, error)
	RunSSHCommand(ctx context.Context, in *glodpb.SSHCommandReq, opts ...grpc.CallOption) (*glodpb.SSHCommand, error)
	HijackDLL(ctx context.Context, in *clientpb.DllHijackReq, opts ...grpc.CallOption) (*clientpb.DllHijack, error)
	GetPrivs(ctx context.Context, in *glodpb.GetPrivsReq, opts ...grpc.CallOption) (*glodpb.GetPrivs, error)
	StartRportFwdListener(ctx context.Context, in *glodpb.RportFwdStartListenerReq, opts ...grpc.CallOption) (*glodpb.RportFwdListener, error)
	GetRportFwdListeners(ctx context.Context, in *glodpb.RportFwdListenersReq, opts ...grpc.CallOption) (*glodpb.RportFwdListeners, error)
	StopRportFwdListener(ctx context.Context, in *glodpb.RportFwdStopListenerReq, opts ...grpc.CallOption) (*glodpb.RportFwdListener, error)
	// Beacon only commands
	OpenSession(ctx context.Context, in *glodpb.OpenSession, opts ...grpc.CallOption) (*glodpb.OpenSession, error)
	CloseSession(ctx context.Context, in *glodpb.CloseSession, opts ...grpc.CallOption) (*commonpb.Empty, error)
	// Extensions
	RegisterExtension(ctx context.Context, in *glodpb.RegisterExtensionReq, opts ...grpc.CallOption) (*glodpb.RegisterExtension, error)
	CallExtension(ctx context.Context, in *glodpb.CallExtensionReq, opts ...grpc.CallOption) (*glodpb.CallExtension, error)
	ListExtensions(ctx context.Context, in *glodpb.ListExtensionsReq, opts ...grpc.CallOption) (*glodpb.ListExtensions, error)
	// *** Wireguard Specific ***
	WGStartPortForward(ctx context.Context, in *glodpb.WGPortForwardStartReq, opts ...grpc.CallOption) (*glodpb.WGPortForward, error)
	WGStopPortForward(ctx context.Context, in *glodpb.WGPortForwardStopReq, opts ...grpc.CallOption) (*glodpb.WGPortForward, error)
	WGStartSocks(ctx context.Context, in *glodpb.WGSocksStartReq, opts ...grpc.CallOption) (*glodpb.WGSocks, error)
	WGStopSocks(ctx context.Context, in *glodpb.WGSocksStopReq, opts ...grpc.CallOption) (*glodpb.WGSocks, error)
	WGListForwarders(ctx context.Context, in *glodpb.WGTCPForwardersReq, opts ...grpc.CallOption) (*glodpb.WGTCPForwarders, error)
	WGListSocksServers(ctx context.Context, in *glodpb.WGSocksServersReq, opts ...grpc.CallOption) (*glodpb.WGSocksServers, error)
	// *** Realtime Commands ***
	Shell(ctx context.Context, in *glodpb.ShellReq, opts ...grpc.CallOption) (*glodpb.Shell, error)
	Portfwd(ctx context.Context, in *glodpb.PortfwdReq, opts ...grpc.CallOption) (*glodpb.Portfwd, error)
	// *** Socks5 ***
	CreateSocks(ctx context.Context, in *glodpb.Socks, opts ...grpc.CallOption) (*glodpb.Socks, error)
	CloseSocks(ctx context.Context, in *glodpb.Socks, opts ...grpc.CallOption) (*commonpb.Empty, error)
	SocksProxy(ctx context.Context, opts ...grpc.CallOption) (SliverRPC_SocksProxyClient, error)
	// *** Tunnels ***
	CreateTunnel(ctx context.Context, in *glodpb.Tunnel, opts ...grpc.CallOption) (*glodpb.Tunnel, error)
	CloseTunnel(ctx context.Context, in *glodpb.Tunnel, opts ...grpc.CallOption) (*commonpb.Empty, error)
	TunnelData(ctx context.Context, opts ...grpc.CallOption) (SliverRPC_TunnelDataClient, error)
	// *** Events ***
	Events(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (SliverRPC_EventsClient, error)
}

type sliverRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewSliverRPCClient(cc grpc.ClientConnInterface) SliverRPCClient {
	return &sliverRPCClient{cc}
}

func (c *sliverRPCClient) GetVersion(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Version, error) {
	out := new(clientpb.Version)
	err := c.cc.Invoke(ctx, SliverRPC_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetOperators(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Operators, error) {
	out := new(clientpb.Operators)
	err := c.cc.Invoke(ctx, SliverRPC_GetOperators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Kill(ctx context.Context, in *glodpb.KillReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, SliverRPC_Kill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Reconfigure(ctx context.Context, in *glodpb.ReconfigureReq, opts ...grpc.CallOption) (*glodpb.Reconfigure, error) {
	out := new(glodpb.Reconfigure)
	err := c.cc.Invoke(ctx, SliverRPC_Reconfigure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Rename(ctx context.Context, in *clientpb.RenameReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, SliverRPC_Rename_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetSessions(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Sessions, error) {
	out := new(clientpb.Sessions)
	err := c.cc.Invoke(ctx, SliverRPC_GetSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetBeacons(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Beacons, error) {
	out := new(clientpb.Beacons)
	err := c.cc.Invoke(ctx, SliverRPC_GetBeacons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetBeacon(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*clientpb.Beacon, error) {
	out := new(clientpb.Beacon)
	err := c.cc.Invoke(ctx, SliverRPC_GetBeacon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RmBeacon(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, SliverRPC_RmBeacon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetBeaconTasks(ctx context.Context, in *clientpb.Beacon, opts ...grpc.CallOption) (*clientpb.BeaconTasks, error) {
	out := new(clientpb.BeaconTasks)
	err := c.cc.Invoke(ctx, SliverRPC_GetBeaconTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetBeaconTaskContent(ctx context.Context, in *clientpb.BeaconTask, opts ...grpc.CallOption) (*clientpb.BeaconTask, error) {
	out := new(clientpb.BeaconTask)
	err := c.cc.Invoke(ctx, SliverRPC_GetBeaconTaskContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) CancelBeaconTask(ctx context.Context, in *clientpb.BeaconTask, opts ...grpc.CallOption) (*clientpb.BeaconTask, error) {
	out := new(clientpb.BeaconTask)
	err := c.cc.Invoke(ctx, SliverRPC_CancelBeaconTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) MonitorStart(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Response, error) {
	out := new(commonpb.Response)
	err := c.cc.Invoke(ctx, SliverRPC_MonitorStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) MonitorStop(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, SliverRPC_MonitorStop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetJobs(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Jobs, error) {
	out := new(clientpb.Jobs)
	err := c.cc.Invoke(ctx, SliverRPC_GetJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) KillJob(ctx context.Context, in *clientpb.KillJobReq, opts ...grpc.CallOption) (*clientpb.KillJob, error) {
	out := new(clientpb.KillJob)
	err := c.cc.Invoke(ctx, SliverRPC_KillJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartMTLSListener(ctx context.Context, in *clientpb.MTLSListenerReq, opts ...grpc.CallOption) (*clientpb.MTLSListener, error) {
	out := new(clientpb.MTLSListener)
	err := c.cc.Invoke(ctx, SliverRPC_StartMTLSListener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartWGListener(ctx context.Context, in *clientpb.WGListenerReq, opts ...grpc.CallOption) (*clientpb.WGListener, error) {
	out := new(clientpb.WGListener)
	err := c.cc.Invoke(ctx, SliverRPC_StartWGListener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartDNSListener(ctx context.Context, in *clientpb.DNSListenerReq, opts ...grpc.CallOption) (*clientpb.DNSListener, error) {
	out := new(clientpb.DNSListener)
	err := c.cc.Invoke(ctx, SliverRPC_StartDNSListener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartHTTPSListener(ctx context.Context, in *clientpb.HTTPListenerReq, opts ...grpc.CallOption) (*clientpb.HTTPListener, error) {
	out := new(clientpb.HTTPListener)
	err := c.cc.Invoke(ctx, SliverRPC_StartHTTPSListener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartHTTPListener(ctx context.Context, in *clientpb.HTTPListenerReq, opts ...grpc.CallOption) (*clientpb.HTTPListener, error) {
	out := new(clientpb.HTTPListener)
	err := c.cc.Invoke(ctx, SliverRPC_StartHTTPListener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartTCPStagerListener(ctx context.Context, in *clientpb.StagerListenerReq, opts ...grpc.CallOption) (*clientpb.StagerListener, error) {
	out := new(clientpb.StagerListener)
	err := c.cc.Invoke(ctx, SliverRPC_StartTCPStagerListener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartHTTPStagerListener(ctx context.Context, in *clientpb.StagerListenerReq, opts ...grpc.CallOption) (*clientpb.StagerListener, error) {
	out := new(clientpb.StagerListener)
	err := c.cc.Invoke(ctx, SliverRPC_StartHTTPStagerListener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) LootAdd(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error) {
	out := new(clientpb.Loot)
	err := c.cc.Invoke(ctx, SliverRPC_LootAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) LootRm(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, SliverRPC_LootRm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) LootUpdate(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error) {
	out := new(clientpb.Loot)
	err := c.cc.Invoke(ctx, SliverRPC_LootUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) LootContent(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.Loot, error) {
	out := new(clientpb.Loot)
	err := c.cc.Invoke(ctx, SliverRPC_LootContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) LootAll(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.AllLoot, error) {
	out := new(clientpb.AllLoot)
	err := c.cc.Invoke(ctx, SliverRPC_LootAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) LootAllOf(ctx context.Context, in *clientpb.Loot, opts ...grpc.CallOption) (*clientpb.AllLoot, error) {
	out := new(clientpb.AllLoot)
	err := c.cc.Invoke(ctx, SliverRPC_LootAllOf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Hosts(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.AllHosts, error) {
	out := new(clientpb.AllHosts)
	err := c.cc.Invoke(ctx, SliverRPC_Hosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Host(ctx context.Context, in *clientpb.Host, opts ...grpc.CallOption) (*clientpb.Host, error) {
	out := new(clientpb.Host)
	err := c.cc.Invoke(ctx, SliverRPC_Host_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) HostRm(ctx context.Context, in *clientpb.Host, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, SliverRPC_HostRm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) HostIOCRm(ctx context.Context, in *clientpb.IOC, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, SliverRPC_HostIOCRm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Generate(ctx context.Context, in *clientpb.GenerateReq, opts ...grpc.CallOption) (*clientpb.Generate, error) {
	out := new(clientpb.Generate)
	err := c.cc.Invoke(ctx, SliverRPC_Generate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GenerateExternal(ctx context.Context, in *clientpb.ExternalGenerateReq, opts ...grpc.CallOption) (*clientpb.ExternalImplantConfig, error) {
	out := new(clientpb.ExternalImplantConfig)
	err := c.cc.Invoke(ctx, SliverRPC_GenerateExternal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GenerateExternalSaveBuild(ctx context.Context, in *clientpb.ExternalImplantBinary, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, SliverRPC_GenerateExternalSaveBuild_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GenerateExternalGetImplantConfig(ctx context.Context, in *clientpb.ImplantConfig, opts ...grpc.CallOption) (*clientpb.ExternalImplantConfig, error) {
	out := new(clientpb.ExternalImplantConfig)
	err := c.cc.Invoke(ctx, SliverRPC_GenerateExternalGetImplantConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) BuilderRegister(ctx context.Context, in *clientpb.Builder, opts ...grpc.CallOption) (SliverRPC_BuilderRegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &SliverRPC_ServiceDesc.Streams[0], SliverRPC_BuilderRegister_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sliverRPCBuilderRegisterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SliverRPC_BuilderRegisterClient interface {
	Recv() (*clientpb.Event, error)
	grpc.ClientStream
}

type sliverRPCBuilderRegisterClient struct {
	grpc.ClientStream
}

func (x *sliverRPCBuilderRegisterClient) Recv() (*clientpb.Event, error) {
	m := new(clientpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sliverRPCClient) BuilderTrigger(ctx context.Context, in *clientpb.Event, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, SliverRPC_BuilderTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Builders(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Builders, error) {
	out := new(clientpb.Builders)
	err := c.cc.Invoke(ctx, SliverRPC_Builders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Regenerate(ctx context.Context, in *clientpb.RegenerateReq, opts ...grpc.CallOption) (*clientpb.Generate, error) {
	out := new(clientpb.Generate)
	err := c.cc.Invoke(ctx, SliverRPC_Regenerate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) ImplantBuilds(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.ImplantBuilds, error) {
	out := new(clientpb.ImplantBuilds)
	err := c.cc.Invoke(ctx, SliverRPC_ImplantBuilds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) DeleteImplantBuild(ctx context.Context, in *clientpb.DeleteReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, SliverRPC_DeleteImplantBuild_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Canaries(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Canaries, error) {
	out := new(clientpb.Canaries)
	err := c.cc.Invoke(ctx, SliverRPC_Canaries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GenerateWGClientConfig(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.WGClientConfig, error) {
	out := new(clientpb.WGClientConfig)
	err := c.cc.Invoke(ctx, SliverRPC_GenerateWGClientConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GenerateUniqueIP(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.UniqueWGIP, error) {
	out := new(clientpb.UniqueWGIP)
	err := c.cc.Invoke(ctx, SliverRPC_GenerateUniqueIP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) ImplantProfiles(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.ImplantProfiles, error) {
	out := new(clientpb.ImplantProfiles)
	err := c.cc.Invoke(ctx, SliverRPC_ImplantProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) DeleteImplantProfile(ctx context.Context, in *clientpb.DeleteReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, SliverRPC_DeleteImplantProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) SaveImplantProfile(ctx context.Context, in *clientpb.ImplantProfile, opts ...grpc.CallOption) (*clientpb.ImplantProfile, error) {
	out := new(clientpb.ImplantProfile)
	err := c.cc.Invoke(ctx, SliverRPC_SaveImplantProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) MsfStage(ctx context.Context, in *clientpb.MsfStagerReq, opts ...grpc.CallOption) (*clientpb.MsfStager, error) {
	out := new(clientpb.MsfStager)
	err := c.cc.Invoke(ctx, SliverRPC_MsfStage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) ShellcodeRDI(ctx context.Context, in *clientpb.ShellcodeRDIReq, opts ...grpc.CallOption) (*clientpb.ShellcodeRDI, error) {
	out := new(clientpb.ShellcodeRDI)
	err := c.cc.Invoke(ctx, SliverRPC_ShellcodeRDI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetCompiler(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Compiler, error) {
	out := new(clientpb.Compiler)
	err := c.cc.Invoke(ctx, SliverRPC_GetCompiler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) ShellcodeEncoder(ctx context.Context, in *clientpb.ShellcodeEncodeReq, opts ...grpc.CallOption) (*clientpb.ShellcodeEncode, error) {
	out := new(clientpb.ShellcodeEncode)
	err := c.cc.Invoke(ctx, SliverRPC_ShellcodeEncoder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) ShellcodeEncoderMap(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.ShellcodeEncoderMap, error) {
	out := new(clientpb.ShellcodeEncoderMap)
	err := c.cc.Invoke(ctx, SliverRPC_ShellcodeEncoderMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Websites(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.Websites, error) {
	out := new(clientpb.Websites)
	err := c.cc.Invoke(ctx, SliverRPC_Websites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Website(ctx context.Context, in *clientpb.Website, opts ...grpc.CallOption) (*clientpb.Website, error) {
	out := new(clientpb.Website)
	err := c.cc.Invoke(ctx, SliverRPC_Website_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WebsiteRemove(ctx context.Context, in *clientpb.Website, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, SliverRPC_WebsiteRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WebsiteAddContent(ctx context.Context, in *clientpb.WebsiteAddContent, opts ...grpc.CallOption) (*clientpb.Website, error) {
	out := new(clientpb.Website)
	err := c.cc.Invoke(ctx, SliverRPC_WebsiteAddContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WebsiteUpdateContent(ctx context.Context, in *clientpb.WebsiteAddContent, opts ...grpc.CallOption) (*clientpb.Website, error) {
	out := new(clientpb.Website)
	err := c.cc.Invoke(ctx, SliverRPC_WebsiteUpdateContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WebsiteRemoveContent(ctx context.Context, in *clientpb.WebsiteRemoveContent, opts ...grpc.CallOption) (*clientpb.Website, error) {
	out := new(clientpb.Website)
	err := c.cc.Invoke(ctx, SliverRPC_WebsiteRemoveContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Ping(ctx context.Context, in *glodpb.Ping, opts ...grpc.CallOption) (*glodpb.Ping, error) {
	out := new(glodpb.Ping)
	err := c.cc.Invoke(ctx, SliverRPC_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Ps(ctx context.Context, in *glodpb.PsReq, opts ...grpc.CallOption) (*glodpb.Ps, error) {
	out := new(glodpb.Ps)
	err := c.cc.Invoke(ctx, SliverRPC_Ps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Terminate(ctx context.Context, in *glodpb.TerminateReq, opts ...grpc.CallOption) (*glodpb.Terminate, error) {
	out := new(glodpb.Terminate)
	err := c.cc.Invoke(ctx, SliverRPC_Terminate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Ifconfig(ctx context.Context, in *glodpb.IfconfigReq, opts ...grpc.CallOption) (*glodpb.Ifconfig, error) {
	out := new(glodpb.Ifconfig)
	err := c.cc.Invoke(ctx, SliverRPC_Ifconfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Netstat(ctx context.Context, in *glodpb.NetstatReq, opts ...grpc.CallOption) (*glodpb.Netstat, error) {
	out := new(glodpb.Netstat)
	err := c.cc.Invoke(ctx, SliverRPC_Netstat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Ls(ctx context.Context, in *glodpb.LsReq, opts ...grpc.CallOption) (*glodpb.Ls, error) {
	out := new(glodpb.Ls)
	err := c.cc.Invoke(ctx, SliverRPC_Ls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Cd(ctx context.Context, in *glodpb.CdReq, opts ...grpc.CallOption) (*glodpb.Pwd, error) {
	out := new(glodpb.Pwd)
	err := c.cc.Invoke(ctx, SliverRPC_Cd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Pwd(ctx context.Context, in *glodpb.PwdReq, opts ...grpc.CallOption) (*glodpb.Pwd, error) {
	out := new(glodpb.Pwd)
	err := c.cc.Invoke(ctx, SliverRPC_Pwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Mv(ctx context.Context, in *glodpb.MvReq, opts ...grpc.CallOption) (*glodpb.Mv, error) {
	out := new(glodpb.Mv)
	err := c.cc.Invoke(ctx, SliverRPC_Mv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Rm(ctx context.Context, in *glodpb.RmReq, opts ...grpc.CallOption) (*glodpb.Rm, error) {
	out := new(glodpb.Rm)
	err := c.cc.Invoke(ctx, SliverRPC_Rm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Mkdir(ctx context.Context, in *glodpb.MkdirReq, opts ...grpc.CallOption) (*glodpb.Mkdir, error) {
	out := new(glodpb.Mkdir)
	err := c.cc.Invoke(ctx, SliverRPC_Mkdir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Download(ctx context.Context, in *glodpb.DownloadReq, opts ...grpc.CallOption) (*glodpb.Download, error) {
	out := new(glodpb.Download)
	err := c.cc.Invoke(ctx, SliverRPC_Download_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Upload(ctx context.Context, in *glodpb.UploadReq, opts ...grpc.CallOption) (*glodpb.Upload, error) {
	out := new(glodpb.Upload)
	err := c.cc.Invoke(ctx, SliverRPC_Upload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Chmod(ctx context.Context, in *glodpb.ChmodReq, opts ...grpc.CallOption) (*glodpb.Chmod, error) {
	out := new(glodpb.Chmod)
	err := c.cc.Invoke(ctx, SliverRPC_Chmod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Chown(ctx context.Context, in *glodpb.ChownReq, opts ...grpc.CallOption) (*glodpb.Chown, error) {
	out := new(glodpb.Chown)
	err := c.cc.Invoke(ctx, SliverRPC_Chown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Chtimes(ctx context.Context, in *glodpb.ChtimesReq, opts ...grpc.CallOption) (*glodpb.Chtimes, error) {
	out := new(glodpb.Chtimes)
	err := c.cc.Invoke(ctx, SliverRPC_Chtimes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) MemfilesList(ctx context.Context, in *glodpb.MemfilesListReq, opts ...grpc.CallOption) (*glodpb.Ls, error) {
	out := new(glodpb.Ls)
	err := c.cc.Invoke(ctx, SliverRPC_MemfilesList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) MemfilesAdd(ctx context.Context, in *glodpb.MemfilesAddReq, opts ...grpc.CallOption) (*glodpb.MemfilesAdd, error) {
	out := new(glodpb.MemfilesAdd)
	err := c.cc.Invoke(ctx, SliverRPC_MemfilesAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) MemfilesRm(ctx context.Context, in *glodpb.MemfilesRmReq, opts ...grpc.CallOption) (*glodpb.MemfilesRm, error) {
	out := new(glodpb.MemfilesRm)
	err := c.cc.Invoke(ctx, SliverRPC_MemfilesRm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) ProcessDump(ctx context.Context, in *glodpb.ProcessDumpReq, opts ...grpc.CallOption) (*glodpb.ProcessDump, error) {
	out := new(glodpb.ProcessDump)
	err := c.cc.Invoke(ctx, SliverRPC_ProcessDump_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RunAs(ctx context.Context, in *glodpb.RunAsReq, opts ...grpc.CallOption) (*glodpb.RunAs, error) {
	out := new(glodpb.RunAs)
	err := c.cc.Invoke(ctx, SliverRPC_RunAs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Impersonate(ctx context.Context, in *glodpb.ImpersonateReq, opts ...grpc.CallOption) (*glodpb.Impersonate, error) {
	out := new(glodpb.Impersonate)
	err := c.cc.Invoke(ctx, SliverRPC_Impersonate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RevToSelf(ctx context.Context, in *glodpb.RevToSelfReq, opts ...grpc.CallOption) (*glodpb.RevToSelf, error) {
	out := new(glodpb.RevToSelf)
	err := c.cc.Invoke(ctx, SliverRPC_RevToSelf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetSystem(ctx context.Context, in *clientpb.GetSystemReq, opts ...grpc.CallOption) (*glodpb.GetSystem, error) {
	out := new(glodpb.GetSystem)
	err := c.cc.Invoke(ctx, SliverRPC_GetSystem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Task(ctx context.Context, in *glodpb.TaskReq, opts ...grpc.CallOption) (*glodpb.Task, error) {
	out := new(glodpb.Task)
	err := c.cc.Invoke(ctx, SliverRPC_Task_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Msf(ctx context.Context, in *clientpb.MSFReq, opts ...grpc.CallOption) (*glodpb.Task, error) {
	out := new(glodpb.Task)
	err := c.cc.Invoke(ctx, SliverRPC_Msf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) MsfRemote(ctx context.Context, in *clientpb.MSFRemoteReq, opts ...grpc.CallOption) (*glodpb.Task, error) {
	out := new(glodpb.Task)
	err := c.cc.Invoke(ctx, SliverRPC_MsfRemote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) ExecuteAssembly(ctx context.Context, in *glodpb.ExecuteAssemblyReq, opts ...grpc.CallOption) (*glodpb.ExecuteAssembly, error) {
	out := new(glodpb.ExecuteAssembly)
	err := c.cc.Invoke(ctx, SliverRPC_ExecuteAssembly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Migrate(ctx context.Context, in *clientpb.MigrateReq, opts ...grpc.CallOption) (*glodpb.Migrate, error) {
	out := new(glodpb.Migrate)
	err := c.cc.Invoke(ctx, SliverRPC_Migrate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Execute(ctx context.Context, in *glodpb.ExecuteReq, opts ...grpc.CallOption) (*glodpb.Execute, error) {
	out := new(glodpb.Execute)
	err := c.cc.Invoke(ctx, SliverRPC_Execute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) ExecuteWindows(ctx context.Context, in *glodpb.ExecuteWindowsReq, opts ...grpc.CallOption) (*glodpb.Execute, error) {
	out := new(glodpb.Execute)
	err := c.cc.Invoke(ctx, SliverRPC_ExecuteWindows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Sideload(ctx context.Context, in *glodpb.SideloadReq, opts ...grpc.CallOption) (*glodpb.Sideload, error) {
	out := new(glodpb.Sideload)
	err := c.cc.Invoke(ctx, SliverRPC_Sideload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) SpawnDll(ctx context.Context, in *glodpb.InvokeSpawnDllReq, opts ...grpc.CallOption) (*glodpb.SpawnDll, error) {
	out := new(glodpb.SpawnDll)
	err := c.cc.Invoke(ctx, SliverRPC_SpawnDll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Screenshot(ctx context.Context, in *glodpb.ScreenshotReq, opts ...grpc.CallOption) (*glodpb.Screenshot, error) {
	out := new(glodpb.Screenshot)
	err := c.cc.Invoke(ctx, SliverRPC_Screenshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) CurrentTokenOwner(ctx context.Context, in *glodpb.CurrentTokenOwnerReq, opts ...grpc.CallOption) (*glodpb.CurrentTokenOwner, error) {
	out := new(glodpb.CurrentTokenOwner)
	err := c.cc.Invoke(ctx, SliverRPC_CurrentTokenOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) PivotStartListener(ctx context.Context, in *glodpb.PivotStartListenerReq, opts ...grpc.CallOption) (*glodpb.PivotListener, error) {
	out := new(glodpb.PivotListener)
	err := c.cc.Invoke(ctx, SliverRPC_PivotStartListener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) PivotStopListener(ctx context.Context, in *glodpb.PivotStopListenerReq, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, SliverRPC_PivotStopListener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) PivotSessionListeners(ctx context.Context, in *glodpb.PivotListenersReq, opts ...grpc.CallOption) (*glodpb.PivotListeners, error) {
	out := new(glodpb.PivotListeners)
	err := c.cc.Invoke(ctx, SliverRPC_PivotSessionListeners_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) PivotGraph(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*clientpb.PivotGraph, error) {
	out := new(clientpb.PivotGraph)
	err := c.cc.Invoke(ctx, SliverRPC_PivotGraph_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartService(ctx context.Context, in *glodpb.StartServiceReq, opts ...grpc.CallOption) (*glodpb.ServiceInfo, error) {
	out := new(glodpb.ServiceInfo)
	err := c.cc.Invoke(ctx, SliverRPC_StartService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StopService(ctx context.Context, in *glodpb.StopServiceReq, opts ...grpc.CallOption) (*glodpb.ServiceInfo, error) {
	out := new(glodpb.ServiceInfo)
	err := c.cc.Invoke(ctx, SliverRPC_StopService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RemoveService(ctx context.Context, in *glodpb.RemoveServiceReq, opts ...grpc.CallOption) (*glodpb.ServiceInfo, error) {
	out := new(glodpb.ServiceInfo)
	err := c.cc.Invoke(ctx, SliverRPC_RemoveService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) MakeToken(ctx context.Context, in *glodpb.MakeTokenReq, opts ...grpc.CallOption) (*glodpb.MakeToken, error) {
	out := new(glodpb.MakeToken)
	err := c.cc.Invoke(ctx, SliverRPC_MakeToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetEnv(ctx context.Context, in *glodpb.EnvReq, opts ...grpc.CallOption) (*glodpb.EnvInfo, error) {
	out := new(glodpb.EnvInfo)
	err := c.cc.Invoke(ctx, SliverRPC_GetEnv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) SetEnv(ctx context.Context, in *glodpb.SetEnvReq, opts ...grpc.CallOption) (*glodpb.SetEnv, error) {
	out := new(glodpb.SetEnv)
	err := c.cc.Invoke(ctx, SliverRPC_SetEnv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) UnsetEnv(ctx context.Context, in *glodpb.UnsetEnvReq, opts ...grpc.CallOption) (*glodpb.UnsetEnv, error) {
	out := new(glodpb.UnsetEnv)
	err := c.cc.Invoke(ctx, SliverRPC_UnsetEnv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Backdoor(ctx context.Context, in *glodpb.BackdoorReq, opts ...grpc.CallOption) (*glodpb.Backdoor, error) {
	out := new(glodpb.Backdoor)
	err := c.cc.Invoke(ctx, SliverRPC_Backdoor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RegistryRead(ctx context.Context, in *glodpb.RegistryReadReq, opts ...grpc.CallOption) (*glodpb.RegistryRead, error) {
	out := new(glodpb.RegistryRead)
	err := c.cc.Invoke(ctx, SliverRPC_RegistryRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RegistryWrite(ctx context.Context, in *glodpb.RegistryWriteReq, opts ...grpc.CallOption) (*glodpb.RegistryWrite, error) {
	out := new(glodpb.RegistryWrite)
	err := c.cc.Invoke(ctx, SliverRPC_RegistryWrite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RegistryCreateKey(ctx context.Context, in *glodpb.RegistryCreateKeyReq, opts ...grpc.CallOption) (*glodpb.RegistryCreateKey, error) {
	out := new(glodpb.RegistryCreateKey)
	err := c.cc.Invoke(ctx, SliverRPC_RegistryCreateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RegistryDeleteKey(ctx context.Context, in *glodpb.RegistryDeleteKeyReq, opts ...grpc.CallOption) (*glodpb.RegistryDeleteKey, error) {
	out := new(glodpb.RegistryDeleteKey)
	err := c.cc.Invoke(ctx, SliverRPC_RegistryDeleteKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RegistryListSubKeys(ctx context.Context, in *glodpb.RegistrySubKeyListReq, opts ...grpc.CallOption) (*glodpb.RegistrySubKeyList, error) {
	out := new(glodpb.RegistrySubKeyList)
	err := c.cc.Invoke(ctx, SliverRPC_RegistryListSubKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RegistryListValues(ctx context.Context, in *glodpb.RegistryListValuesReq, opts ...grpc.CallOption) (*glodpb.RegistryValuesList, error) {
	out := new(glodpb.RegistryValuesList)
	err := c.cc.Invoke(ctx, SliverRPC_RegistryListValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RunSSHCommand(ctx context.Context, in *glodpb.SSHCommandReq, opts ...grpc.CallOption) (*glodpb.SSHCommand, error) {
	out := new(glodpb.SSHCommand)
	err := c.cc.Invoke(ctx, SliverRPC_RunSSHCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) HijackDLL(ctx context.Context, in *clientpb.DllHijackReq, opts ...grpc.CallOption) (*clientpb.DllHijack, error) {
	out := new(clientpb.DllHijack)
	err := c.cc.Invoke(ctx, SliverRPC_HijackDLL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetPrivs(ctx context.Context, in *glodpb.GetPrivsReq, opts ...grpc.CallOption) (*glodpb.GetPrivs, error) {
	out := new(glodpb.GetPrivs)
	err := c.cc.Invoke(ctx, SliverRPC_GetPrivs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StartRportFwdListener(ctx context.Context, in *glodpb.RportFwdStartListenerReq, opts ...grpc.CallOption) (*glodpb.RportFwdListener, error) {
	out := new(glodpb.RportFwdListener)
	err := c.cc.Invoke(ctx, SliverRPC_StartRportFwdListener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) GetRportFwdListeners(ctx context.Context, in *glodpb.RportFwdListenersReq, opts ...grpc.CallOption) (*glodpb.RportFwdListeners, error) {
	out := new(glodpb.RportFwdListeners)
	err := c.cc.Invoke(ctx, SliverRPC_GetRportFwdListeners_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) StopRportFwdListener(ctx context.Context, in *glodpb.RportFwdStopListenerReq, opts ...grpc.CallOption) (*glodpb.RportFwdListener, error) {
	out := new(glodpb.RportFwdListener)
	err := c.cc.Invoke(ctx, SliverRPC_StopRportFwdListener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) OpenSession(ctx context.Context, in *glodpb.OpenSession, opts ...grpc.CallOption) (*glodpb.OpenSession, error) {
	out := new(glodpb.OpenSession)
	err := c.cc.Invoke(ctx, SliverRPC_OpenSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) CloseSession(ctx context.Context, in *glodpb.CloseSession, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, SliverRPC_CloseSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) RegisterExtension(ctx context.Context, in *glodpb.RegisterExtensionReq, opts ...grpc.CallOption) (*glodpb.RegisterExtension, error) {
	out := new(glodpb.RegisterExtension)
	err := c.cc.Invoke(ctx, SliverRPC_RegisterExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) CallExtension(ctx context.Context, in *glodpb.CallExtensionReq, opts ...grpc.CallOption) (*glodpb.CallExtension, error) {
	out := new(glodpb.CallExtension)
	err := c.cc.Invoke(ctx, SliverRPC_CallExtension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) ListExtensions(ctx context.Context, in *glodpb.ListExtensionsReq, opts ...grpc.CallOption) (*glodpb.ListExtensions, error) {
	out := new(glodpb.ListExtensions)
	err := c.cc.Invoke(ctx, SliverRPC_ListExtensions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WGStartPortForward(ctx context.Context, in *glodpb.WGPortForwardStartReq, opts ...grpc.CallOption) (*glodpb.WGPortForward, error) {
	out := new(glodpb.WGPortForward)
	err := c.cc.Invoke(ctx, SliverRPC_WGStartPortForward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WGStopPortForward(ctx context.Context, in *glodpb.WGPortForwardStopReq, opts ...grpc.CallOption) (*glodpb.WGPortForward, error) {
	out := new(glodpb.WGPortForward)
	err := c.cc.Invoke(ctx, SliverRPC_WGStopPortForward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WGStartSocks(ctx context.Context, in *glodpb.WGSocksStartReq, opts ...grpc.CallOption) (*glodpb.WGSocks, error) {
	out := new(glodpb.WGSocks)
	err := c.cc.Invoke(ctx, SliverRPC_WGStartSocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WGStopSocks(ctx context.Context, in *glodpb.WGSocksStopReq, opts ...grpc.CallOption) (*glodpb.WGSocks, error) {
	out := new(glodpb.WGSocks)
	err := c.cc.Invoke(ctx, SliverRPC_WGStopSocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WGListForwarders(ctx context.Context, in *glodpb.WGTCPForwardersReq, opts ...grpc.CallOption) (*glodpb.WGTCPForwarders, error) {
	out := new(glodpb.WGTCPForwarders)
	err := c.cc.Invoke(ctx, SliverRPC_WGListForwarders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) WGListSocksServers(ctx context.Context, in *glodpb.WGSocksServersReq, opts ...grpc.CallOption) (*glodpb.WGSocksServers, error) {
	out := new(glodpb.WGSocksServers)
	err := c.cc.Invoke(ctx, SliverRPC_WGListSocksServers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Shell(ctx context.Context, in *glodpb.ShellReq, opts ...grpc.CallOption) (*glodpb.Shell, error) {
	out := new(glodpb.Shell)
	err := c.cc.Invoke(ctx, SliverRPC_Shell_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) Portfwd(ctx context.Context, in *glodpb.PortfwdReq, opts ...grpc.CallOption) (*glodpb.Portfwd, error) {
	out := new(glodpb.Portfwd)
	err := c.cc.Invoke(ctx, SliverRPC_Portfwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) CreateSocks(ctx context.Context, in *glodpb.Socks, opts ...grpc.CallOption) (*glodpb.Socks, error) {
	out := new(glodpb.Socks)
	err := c.cc.Invoke(ctx, SliverRPC_CreateSocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) CloseSocks(ctx context.Context, in *glodpb.Socks, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, SliverRPC_CloseSocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) SocksProxy(ctx context.Context, opts ...grpc.CallOption) (SliverRPC_SocksProxyClient, error) {
	stream, err := c.cc.NewStream(ctx, &SliverRPC_ServiceDesc.Streams[1], SliverRPC_SocksProxy_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sliverRPCSocksProxyClient{stream}
	return x, nil
}

type SliverRPC_SocksProxyClient interface {
	Send(*glodpb.SocksData) error
	Recv() (*glodpb.SocksData, error)
	grpc.ClientStream
}

type sliverRPCSocksProxyClient struct {
	grpc.ClientStream
}

func (x *sliverRPCSocksProxyClient) Send(m *glodpb.SocksData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sliverRPCSocksProxyClient) Recv() (*glodpb.SocksData, error) {
	m := new(glodpb.SocksData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sliverRPCClient) CreateTunnel(ctx context.Context, in *glodpb.Tunnel, opts ...grpc.CallOption) (*glodpb.Tunnel, error) {
	out := new(glodpb.Tunnel)
	err := c.cc.Invoke(ctx, SliverRPC_CreateTunnel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) CloseTunnel(ctx context.Context, in *glodpb.Tunnel, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, SliverRPC_CloseTunnel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sliverRPCClient) TunnelData(ctx context.Context, opts ...grpc.CallOption) (SliverRPC_TunnelDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &SliverRPC_ServiceDesc.Streams[2], SliverRPC_TunnelData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sliverRPCTunnelDataClient{stream}
	return x, nil
}

type SliverRPC_TunnelDataClient interface {
	Send(*glodpb.TunnelData) error
	Recv() (*glodpb.TunnelData, error)
	grpc.ClientStream
}

type sliverRPCTunnelDataClient struct {
	grpc.ClientStream
}

func (x *sliverRPCTunnelDataClient) Send(m *glodpb.TunnelData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sliverRPCTunnelDataClient) Recv() (*glodpb.TunnelData, error) {
	m := new(glodpb.TunnelData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sliverRPCClient) Events(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (SliverRPC_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SliverRPC_ServiceDesc.Streams[3], SliverRPC_Events_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sliverRPCEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SliverRPC_EventsClient interface {
	Recv() (*clientpb.Event, error)
	grpc.ClientStream
}

type sliverRPCEventsClient struct {
	grpc.ClientStream
}

func (x *sliverRPCEventsClient) Recv() (*clientpb.Event, error) {
	m := new(clientpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SliverRPCServer is the server API for SliverRPC service.
// All implementations must embed UnimplementedSliverRPCServer
// for forward compatibility
type SliverRPCServer interface {
	// *** Version ***
	GetVersion(context.Context, *commonpb.Empty) (*clientpb.Version, error)
	// *** Operator Commands ***
	GetOperators(context.Context, *commonpb.Empty) (*clientpb.Operators, error)
	// *** Generic ***
	Kill(context.Context, *glodpb.KillReq) (*commonpb.Empty, error)
	Reconfigure(context.Context, *glodpb.ReconfigureReq) (*glodpb.Reconfigure, error)
	Rename(context.Context, *clientpb.RenameReq) (*commonpb.Empty, error)
	// *** Sessions ***
	GetSessions(context.Context, *commonpb.Empty) (*clientpb.Sessions, error)
	// *** Beacons ***
	GetBeacons(context.Context, *commonpb.Empty) (*clientpb.Beacons, error)
	GetBeacon(context.Context, *clientpb.Beacon) (*clientpb.Beacon, error)
	RmBeacon(context.Context, *clientpb.Beacon) (*commonpb.Empty, error)
	GetBeaconTasks(context.Context, *clientpb.Beacon) (*clientpb.BeaconTasks, error)
	GetBeaconTaskContent(context.Context, *clientpb.BeaconTask) (*clientpb.BeaconTask, error)
	CancelBeaconTask(context.Context, *clientpb.BeaconTask) (*clientpb.BeaconTask, error)
	// ***Threat monitoring ***
	MonitorStart(context.Context, *commonpb.Empty) (*commonpb.Response, error)
	MonitorStop(context.Context, *commonpb.Empty) (*commonpb.Empty, error)
	// *** Jobs ***
	GetJobs(context.Context, *commonpb.Empty) (*clientpb.Jobs, error)
	KillJob(context.Context, *clientpb.KillJobReq) (*clientpb.KillJob, error)
	// *** Listeners ***
	StartMTLSListener(context.Context, *clientpb.MTLSListenerReq) (*clientpb.MTLSListener, error)
	StartWGListener(context.Context, *clientpb.WGListenerReq) (*clientpb.WGListener, error)
	StartDNSListener(context.Context, *clientpb.DNSListenerReq) (*clientpb.DNSListener, error)
	StartHTTPSListener(context.Context, *clientpb.HTTPListenerReq) (*clientpb.HTTPListener, error)
	StartHTTPListener(context.Context, *clientpb.HTTPListenerReq) (*clientpb.HTTPListener, error)
	// *** Stager Listener ***
	StartTCPStagerListener(context.Context, *clientpb.StagerListenerReq) (*clientpb.StagerListener, error)
	StartHTTPStagerListener(context.Context, *clientpb.StagerListenerReq) (*clientpb.StagerListener, error)
	// *** Loot ***
	LootAdd(context.Context, *clientpb.Loot) (*clientpb.Loot, error)
	LootRm(context.Context, *clientpb.Loot) (*commonpb.Empty, error)
	LootUpdate(context.Context, *clientpb.Loot) (*clientpb.Loot, error)
	LootContent(context.Context, *clientpb.Loot) (*clientpb.Loot, error)
	LootAll(context.Context, *commonpb.Empty) (*clientpb.AllLoot, error)
	LootAllOf(context.Context, *clientpb.Loot) (*clientpb.AllLoot, error)
	// *** Hosts ***
	Hosts(context.Context, *commonpb.Empty) (*clientpb.AllHosts, error)
	Host(context.Context, *clientpb.Host) (*clientpb.Host, error)
	HostRm(context.Context, *clientpb.Host) (*commonpb.Empty, error)
	HostIOCRm(context.Context, *clientpb.IOC) (*commonpb.Empty, error)
	// *** Implants ***
	Generate(context.Context, *clientpb.GenerateReq) (*clientpb.Generate, error)
	GenerateExternal(context.Context, *clientpb.ExternalGenerateReq) (*clientpb.ExternalImplantConfig, error)
	GenerateExternalSaveBuild(context.Context, *clientpb.ExternalImplantBinary) (*commonpb.Empty, error)
	GenerateExternalGetImplantConfig(context.Context, *clientpb.ImplantConfig) (*clientpb.ExternalImplantConfig, error)
	BuilderRegister(*clientpb.Builder, SliverRPC_BuilderRegisterServer) error
	BuilderTrigger(context.Context, *clientpb.Event) (*commonpb.Empty, error)
	Builders(context.Context, *commonpb.Empty) (*clientpb.Builders, error)
	Regenerate(context.Context, *clientpb.RegenerateReq) (*clientpb.Generate, error)
	ImplantBuilds(context.Context, *commonpb.Empty) (*clientpb.ImplantBuilds, error)
	DeleteImplantBuild(context.Context, *clientpb.DeleteReq) (*commonpb.Empty, error)
	Canaries(context.Context, *commonpb.Empty) (*clientpb.Canaries, error)
	GenerateWGClientConfig(context.Context, *commonpb.Empty) (*clientpb.WGClientConfig, error)
	GenerateUniqueIP(context.Context, *commonpb.Empty) (*clientpb.UniqueWGIP, error)
	ImplantProfiles(context.Context, *commonpb.Empty) (*clientpb.ImplantProfiles, error)
	DeleteImplantProfile(context.Context, *clientpb.DeleteReq) (*commonpb.Empty, error)
	SaveImplantProfile(context.Context, *clientpb.ImplantProfile) (*clientpb.ImplantProfile, error)
	MsfStage(context.Context, *clientpb.MsfStagerReq) (*clientpb.MsfStager, error)
	ShellcodeRDI(context.Context, *clientpb.ShellcodeRDIReq) (*clientpb.ShellcodeRDI, error)
	GetCompiler(context.Context, *commonpb.Empty) (*clientpb.Compiler, error)
	ShellcodeEncoder(context.Context, *clientpb.ShellcodeEncodeReq) (*clientpb.ShellcodeEncode, error)
	ShellcodeEncoderMap(context.Context, *commonpb.Empty) (*clientpb.ShellcodeEncoderMap, error)
	// *** Websites ***
	Websites(context.Context, *commonpb.Empty) (*clientpb.Websites, error)
	Website(context.Context, *clientpb.Website) (*clientpb.Website, error)
	WebsiteRemove(context.Context, *clientpb.Website) (*commonpb.Empty, error)
	WebsiteAddContent(context.Context, *clientpb.WebsiteAddContent) (*clientpb.Website, error)
	WebsiteUpdateContent(context.Context, *clientpb.WebsiteAddContent) (*clientpb.Website, error)
	WebsiteRemoveContent(context.Context, *clientpb.WebsiteRemoveContent) (*clientpb.Website, error)
	// *** Session Interactions ***
	Ping(context.Context, *glodpb.Ping) (*glodpb.Ping, error)
	Ps(context.Context, *glodpb.PsReq) (*glodpb.Ps, error)
	Terminate(context.Context, *glodpb.TerminateReq) (*glodpb.Terminate, error)
	Ifconfig(context.Context, *glodpb.IfconfigReq) (*glodpb.Ifconfig, error)
	Netstat(context.Context, *glodpb.NetstatReq) (*glodpb.Netstat, error)
	Ls(context.Context, *glodpb.LsReq) (*glodpb.Ls, error)
	Cd(context.Context, *glodpb.CdReq) (*glodpb.Pwd, error)
	Pwd(context.Context, *glodpb.PwdReq) (*glodpb.Pwd, error)
	Mv(context.Context, *glodpb.MvReq) (*glodpb.Mv, error)
	Rm(context.Context, *glodpb.RmReq) (*glodpb.Rm, error)
	Mkdir(context.Context, *glodpb.MkdirReq) (*glodpb.Mkdir, error)
	Download(context.Context, *glodpb.DownloadReq) (*glodpb.Download, error)
	Upload(context.Context, *glodpb.UploadReq) (*glodpb.Upload, error)
	Chmod(context.Context, *glodpb.ChmodReq) (*glodpb.Chmod, error)
	Chown(context.Context, *glodpb.ChownReq) (*glodpb.Chown, error)
	Chtimes(context.Context, *glodpb.ChtimesReq) (*glodpb.Chtimes, error)
	MemfilesList(context.Context, *glodpb.MemfilesListReq) (*glodpb.Ls, error)
	MemfilesAdd(context.Context, *glodpb.MemfilesAddReq) (*glodpb.MemfilesAdd, error)
	MemfilesRm(context.Context, *glodpb.MemfilesRmReq) (*glodpb.MemfilesRm, error)
	ProcessDump(context.Context, *glodpb.ProcessDumpReq) (*glodpb.ProcessDump, error)
	RunAs(context.Context, *glodpb.RunAsReq) (*glodpb.RunAs, error)
	Impersonate(context.Context, *glodpb.ImpersonateReq) (*glodpb.Impersonate, error)
	RevToSelf(context.Context, *glodpb.RevToSelfReq) (*glodpb.RevToSelf, error)
	GetSystem(context.Context, *clientpb.GetSystemReq) (*glodpb.GetSystem, error)
	Task(context.Context, *glodpb.TaskReq) (*glodpb.Task, error)
	Msf(context.Context, *clientpb.MSFReq) (*glodpb.Task, error)
	MsfRemote(context.Context, *clientpb.MSFRemoteReq) (*glodpb.Task, error)
	ExecuteAssembly(context.Context, *glodpb.ExecuteAssemblyReq) (*glodpb.ExecuteAssembly, error)
	Migrate(context.Context, *clientpb.MigrateReq) (*glodpb.Migrate, error)
	Execute(context.Context, *glodpb.ExecuteReq) (*glodpb.Execute, error)
	ExecuteWindows(context.Context, *glodpb.ExecuteWindowsReq) (*glodpb.Execute, error)
	Sideload(context.Context, *glodpb.SideloadReq) (*glodpb.Sideload, error)
	SpawnDll(context.Context, *glodpb.InvokeSpawnDllReq) (*glodpb.SpawnDll, error)
	Screenshot(context.Context, *glodpb.ScreenshotReq) (*glodpb.Screenshot, error)
	CurrentTokenOwner(context.Context, *glodpb.CurrentTokenOwnerReq) (*glodpb.CurrentTokenOwner, error)
	// *** Pivots ***
	PivotStartListener(context.Context, *glodpb.PivotStartListenerReq) (*glodpb.PivotListener, error)
	PivotStopListener(context.Context, *glodpb.PivotStopListenerReq) (*commonpb.Empty, error)
	PivotSessionListeners(context.Context, *glodpb.PivotListenersReq) (*glodpb.PivotListeners, error)
	PivotGraph(context.Context, *commonpb.Empty) (*clientpb.PivotGraph, error)
	StartService(context.Context, *glodpb.StartServiceReq) (*glodpb.ServiceInfo, error)
	StopService(context.Context, *glodpb.StopServiceReq) (*glodpb.ServiceInfo, error)
	RemoveService(context.Context, *glodpb.RemoveServiceReq) (*glodpb.ServiceInfo, error)
	MakeToken(context.Context, *glodpb.MakeTokenReq) (*glodpb.MakeToken, error)
	GetEnv(context.Context, *glodpb.EnvReq) (*glodpb.EnvInfo, error)
	SetEnv(context.Context, *glodpb.SetEnvReq) (*glodpb.SetEnv, error)
	UnsetEnv(context.Context, *glodpb.UnsetEnvReq) (*glodpb.UnsetEnv, error)
	Backdoor(context.Context, *glodpb.BackdoorReq) (*glodpb.Backdoor, error)
	RegistryRead(context.Context, *glodpb.RegistryReadReq) (*glodpb.RegistryRead, error)
	RegistryWrite(context.Context, *glodpb.RegistryWriteReq) (*glodpb.RegistryWrite, error)
	RegistryCreateKey(context.Context, *glodpb.RegistryCreateKeyReq) (*glodpb.RegistryCreateKey, error)
	RegistryDeleteKey(context.Context, *glodpb.RegistryDeleteKeyReq) (*glodpb.RegistryDeleteKey, error)
	RegistryListSubKeys(context.Context, *glodpb.RegistrySubKeyListReq) (*glodpb.RegistrySubKeyList, error)
	RegistryListValues(context.Context, *glodpb.RegistryListValuesReq) (*glodpb.RegistryValuesList, error)
	RunSSHCommand(context.Context, *glodpb.SSHCommandReq) (*glodpb.SSHCommand, error)
	HijackDLL(context.Context, *clientpb.DllHijackReq) (*clientpb.DllHijack, error)
	GetPrivs(context.Context, *glodpb.GetPrivsReq) (*glodpb.GetPrivs, error)
	StartRportFwdListener(context.Context, *glodpb.RportFwdStartListenerReq) (*glodpb.RportFwdListener, error)
	GetRportFwdListeners(context.Context, *glodpb.RportFwdListenersReq) (*glodpb.RportFwdListeners, error)
	StopRportFwdListener(context.Context, *glodpb.RportFwdStopListenerReq) (*glodpb.RportFwdListener, error)
	// Beacon only commands
	OpenSession(context.Context, *glodpb.OpenSession) (*glodpb.OpenSession, error)
	CloseSession(context.Context, *glodpb.CloseSession) (*commonpb.Empty, error)
	// Extensions
	RegisterExtension(context.Context, *glodpb.RegisterExtensionReq) (*glodpb.RegisterExtension, error)
	CallExtension(context.Context, *glodpb.CallExtensionReq) (*glodpb.CallExtension, error)
	ListExtensions(context.Context, *glodpb.ListExtensionsReq) (*glodpb.ListExtensions, error)
	// *** Wireguard Specific ***
	WGStartPortForward(context.Context, *glodpb.WGPortForwardStartReq) (*glodpb.WGPortForward, error)
	WGStopPortForward(context.Context, *glodpb.WGPortForwardStopReq) (*glodpb.WGPortForward, error)
	WGStartSocks(context.Context, *glodpb.WGSocksStartReq) (*glodpb.WGSocks, error)
	WGStopSocks(context.Context, *glodpb.WGSocksStopReq) (*glodpb.WGSocks, error)
	WGListForwarders(context.Context, *glodpb.WGTCPForwardersReq) (*glodpb.WGTCPForwarders, error)
	WGListSocksServers(context.Context, *glodpb.WGSocksServersReq) (*glodpb.WGSocksServers, error)
	// *** Realtime Commands ***
	Shell(context.Context, *glodpb.ShellReq) (*glodpb.Shell, error)
	Portfwd(context.Context, *glodpb.PortfwdReq) (*glodpb.Portfwd, error)
	// *** Socks5 ***
	CreateSocks(context.Context, *glodpb.Socks) (*glodpb.Socks, error)
	CloseSocks(context.Context, *glodpb.Socks) (*commonpb.Empty, error)
	SocksProxy(SliverRPC_SocksProxyServer) error
	// *** Tunnels ***
	CreateTunnel(context.Context, *glodpb.Tunnel) (*glodpb.Tunnel, error)
	CloseTunnel(context.Context, *glodpb.Tunnel) (*commonpb.Empty, error)
	TunnelData(SliverRPC_TunnelDataServer) error
	// *** Events ***
	Events(*commonpb.Empty, SliverRPC_EventsServer) error
	mustEmbedUnimplementedSliverRPCServer()
}

// UnimplementedSliverRPCServer must be embedded to have forward compatible implementations.
type UnimplementedSliverRPCServer struct {
}

func (UnimplementedSliverRPCServer) GetVersion(context.Context, *commonpb.Empty) (*clientpb.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedSliverRPCServer) GetOperators(context.Context, *commonpb.Empty) (*clientpb.Operators, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperators not implemented")
}
func (UnimplementedSliverRPCServer) Kill(context.Context, *glodpb.KillReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedSliverRPCServer) Reconfigure(context.Context, *glodpb.ReconfigureReq) (*glodpb.Reconfigure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reconfigure not implemented")
}
func (UnimplementedSliverRPCServer) Rename(context.Context, *clientpb.RenameReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedSliverRPCServer) GetSessions(context.Context, *commonpb.Empty) (*clientpb.Sessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedSliverRPCServer) GetBeacons(context.Context, *commonpb.Empty) (*clientpb.Beacons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeacons not implemented")
}
func (UnimplementedSliverRPCServer) GetBeacon(context.Context, *clientpb.Beacon) (*clientpb.Beacon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeacon not implemented")
}
func (UnimplementedSliverRPCServer) RmBeacon(context.Context, *clientpb.Beacon) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmBeacon not implemented")
}
func (UnimplementedSliverRPCServer) GetBeaconTasks(context.Context, *clientpb.Beacon) (*clientpb.BeaconTasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeaconTasks not implemented")
}
func (UnimplementedSliverRPCServer) GetBeaconTaskContent(context.Context, *clientpb.BeaconTask) (*clientpb.BeaconTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeaconTaskContent not implemented")
}
func (UnimplementedSliverRPCServer) CancelBeaconTask(context.Context, *clientpb.BeaconTask) (*clientpb.BeaconTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBeaconTask not implemented")
}
func (UnimplementedSliverRPCServer) MonitorStart(context.Context, *commonpb.Empty) (*commonpb.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorStart not implemented")
}
func (UnimplementedSliverRPCServer) MonitorStop(context.Context, *commonpb.Empty) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorStop not implemented")
}
func (UnimplementedSliverRPCServer) GetJobs(context.Context, *commonpb.Empty) (*clientpb.Jobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedSliverRPCServer) KillJob(context.Context, *clientpb.KillJobReq) (*clientpb.KillJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillJob not implemented")
}
func (UnimplementedSliverRPCServer) StartMTLSListener(context.Context, *clientpb.MTLSListenerReq) (*clientpb.MTLSListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMTLSListener not implemented")
}
func (UnimplementedSliverRPCServer) StartWGListener(context.Context, *clientpb.WGListenerReq) (*clientpb.WGListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWGListener not implemented")
}
func (UnimplementedSliverRPCServer) StartDNSListener(context.Context, *clientpb.DNSListenerReq) (*clientpb.DNSListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDNSListener not implemented")
}
func (UnimplementedSliverRPCServer) StartHTTPSListener(context.Context, *clientpb.HTTPListenerReq) (*clientpb.HTTPListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHTTPSListener not implemented")
}
func (UnimplementedSliverRPCServer) StartHTTPListener(context.Context, *clientpb.HTTPListenerReq) (*clientpb.HTTPListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHTTPListener not implemented")
}
func (UnimplementedSliverRPCServer) StartTCPStagerListener(context.Context, *clientpb.StagerListenerReq) (*clientpb.StagerListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTCPStagerListener not implemented")
}
func (UnimplementedSliverRPCServer) StartHTTPStagerListener(context.Context, *clientpb.StagerListenerReq) (*clientpb.StagerListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHTTPStagerListener not implemented")
}
func (UnimplementedSliverRPCServer) LootAdd(context.Context, *clientpb.Loot) (*clientpb.Loot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootAdd not implemented")
}
func (UnimplementedSliverRPCServer) LootRm(context.Context, *clientpb.Loot) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootRm not implemented")
}
func (UnimplementedSliverRPCServer) LootUpdate(context.Context, *clientpb.Loot) (*clientpb.Loot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootUpdate not implemented")
}
func (UnimplementedSliverRPCServer) LootContent(context.Context, *clientpb.Loot) (*clientpb.Loot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootContent not implemented")
}
func (UnimplementedSliverRPCServer) LootAll(context.Context, *commonpb.Empty) (*clientpb.AllLoot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootAll not implemented")
}
func (UnimplementedSliverRPCServer) LootAllOf(context.Context, *clientpb.Loot) (*clientpb.AllLoot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LootAllOf not implemented")
}
func (UnimplementedSliverRPCServer) Hosts(context.Context, *commonpb.Empty) (*clientpb.AllHosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hosts not implemented")
}
func (UnimplementedSliverRPCServer) Host(context.Context, *clientpb.Host) (*clientpb.Host, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Host not implemented")
}
func (UnimplementedSliverRPCServer) HostRm(context.Context, *clientpb.Host) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostRm not implemented")
}
func (UnimplementedSliverRPCServer) HostIOCRm(context.Context, *clientpb.IOC) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostIOCRm not implemented")
}
func (UnimplementedSliverRPCServer) Generate(context.Context, *clientpb.GenerateReq) (*clientpb.Generate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedSliverRPCServer) GenerateExternal(context.Context, *clientpb.ExternalGenerateReq) (*clientpb.ExternalImplantConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateExternal not implemented")
}
func (UnimplementedSliverRPCServer) GenerateExternalSaveBuild(context.Context, *clientpb.ExternalImplantBinary) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateExternalSaveBuild not implemented")
}
func (UnimplementedSliverRPCServer) GenerateExternalGetImplantConfig(context.Context, *clientpb.ImplantConfig) (*clientpb.ExternalImplantConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateExternalGetImplantConfig not implemented")
}
func (UnimplementedSliverRPCServer) BuilderRegister(*clientpb.Builder, SliverRPC_BuilderRegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method BuilderRegister not implemented")
}
func (UnimplementedSliverRPCServer) BuilderTrigger(context.Context, *clientpb.Event) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuilderTrigger not implemented")
}
func (UnimplementedSliverRPCServer) Builders(context.Context, *commonpb.Empty) (*clientpb.Builders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Builders not implemented")
}
func (UnimplementedSliverRPCServer) Regenerate(context.Context, *clientpb.RegenerateReq) (*clientpb.Generate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Regenerate not implemented")
}
func (UnimplementedSliverRPCServer) ImplantBuilds(context.Context, *commonpb.Empty) (*clientpb.ImplantBuilds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImplantBuilds not implemented")
}
func (UnimplementedSliverRPCServer) DeleteImplantBuild(context.Context, *clientpb.DeleteReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImplantBuild not implemented")
}
func (UnimplementedSliverRPCServer) Canaries(context.Context, *commonpb.Empty) (*clientpb.Canaries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Canaries not implemented")
}
func (UnimplementedSliverRPCServer) GenerateWGClientConfig(context.Context, *commonpb.Empty) (*clientpb.WGClientConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateWGClientConfig not implemented")
}
func (UnimplementedSliverRPCServer) GenerateUniqueIP(context.Context, *commonpb.Empty) (*clientpb.UniqueWGIP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUniqueIP not implemented")
}
func (UnimplementedSliverRPCServer) ImplantProfiles(context.Context, *commonpb.Empty) (*clientpb.ImplantProfiles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImplantProfiles not implemented")
}
func (UnimplementedSliverRPCServer) DeleteImplantProfile(context.Context, *clientpb.DeleteReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImplantProfile not implemented")
}
func (UnimplementedSliverRPCServer) SaveImplantProfile(context.Context, *clientpb.ImplantProfile) (*clientpb.ImplantProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveImplantProfile not implemented")
}
func (UnimplementedSliverRPCServer) MsfStage(context.Context, *clientpb.MsfStagerReq) (*clientpb.MsfStager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsfStage not implemented")
}
func (UnimplementedSliverRPCServer) ShellcodeRDI(context.Context, *clientpb.ShellcodeRDIReq) (*clientpb.ShellcodeRDI, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShellcodeRDI not implemented")
}
func (UnimplementedSliverRPCServer) GetCompiler(context.Context, *commonpb.Empty) (*clientpb.Compiler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompiler not implemented")
}
func (UnimplementedSliverRPCServer) ShellcodeEncoder(context.Context, *clientpb.ShellcodeEncodeReq) (*clientpb.ShellcodeEncode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShellcodeEncoder not implemented")
}
func (UnimplementedSliverRPCServer) ShellcodeEncoderMap(context.Context, *commonpb.Empty) (*clientpb.ShellcodeEncoderMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShellcodeEncoderMap not implemented")
}
func (UnimplementedSliverRPCServer) Websites(context.Context, *commonpb.Empty) (*clientpb.Websites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Websites not implemented")
}
func (UnimplementedSliverRPCServer) Website(context.Context, *clientpb.Website) (*clientpb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Website not implemented")
}
func (UnimplementedSliverRPCServer) WebsiteRemove(context.Context, *clientpb.Website) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteRemove not implemented")
}
func (UnimplementedSliverRPCServer) WebsiteAddContent(context.Context, *clientpb.WebsiteAddContent) (*clientpb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteAddContent not implemented")
}
func (UnimplementedSliverRPCServer) WebsiteUpdateContent(context.Context, *clientpb.WebsiteAddContent) (*clientpb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteUpdateContent not implemented")
}
func (UnimplementedSliverRPCServer) WebsiteRemoveContent(context.Context, *clientpb.WebsiteRemoveContent) (*clientpb.Website, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteRemoveContent not implemented")
}
func (UnimplementedSliverRPCServer) Ping(context.Context, *glodpb.Ping) (*glodpb.Ping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSliverRPCServer) Ps(context.Context, *glodpb.PsReq) (*glodpb.Ps, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ps not implemented")
}
func (UnimplementedSliverRPCServer) Terminate(context.Context, *glodpb.TerminateReq) (*glodpb.Terminate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (UnimplementedSliverRPCServer) Ifconfig(context.Context, *glodpb.IfconfigReq) (*glodpb.Ifconfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ifconfig not implemented")
}
func (UnimplementedSliverRPCServer) Netstat(context.Context, *glodpb.NetstatReq) (*glodpb.Netstat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Netstat not implemented")
}
func (UnimplementedSliverRPCServer) Ls(context.Context, *glodpb.LsReq) (*glodpb.Ls, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ls not implemented")
}
func (UnimplementedSliverRPCServer) Cd(context.Context, *glodpb.CdReq) (*glodpb.Pwd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cd not implemented")
}
func (UnimplementedSliverRPCServer) Pwd(context.Context, *glodpb.PwdReq) (*glodpb.Pwd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pwd not implemented")
}
func (UnimplementedSliverRPCServer) Mv(context.Context, *glodpb.MvReq) (*glodpb.Mv, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mv not implemented")
}
func (UnimplementedSliverRPCServer) Rm(context.Context, *glodpb.RmReq) (*glodpb.Rm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rm not implemented")
}
func (UnimplementedSliverRPCServer) Mkdir(context.Context, *glodpb.MkdirReq) (*glodpb.Mkdir, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mkdir not implemented")
}
func (UnimplementedSliverRPCServer) Download(context.Context, *glodpb.DownloadReq) (*glodpb.Download, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedSliverRPCServer) Upload(context.Context, *glodpb.UploadReq) (*glodpb.Upload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedSliverRPCServer) Chmod(context.Context, *glodpb.ChmodReq) (*glodpb.Chmod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chmod not implemented")
}
func (UnimplementedSliverRPCServer) Chown(context.Context, *glodpb.ChownReq) (*glodpb.Chown, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chown not implemented")
}
func (UnimplementedSliverRPCServer) Chtimes(context.Context, *glodpb.ChtimesReq) (*glodpb.Chtimes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chtimes not implemented")
}
func (UnimplementedSliverRPCServer) MemfilesList(context.Context, *glodpb.MemfilesListReq) (*glodpb.Ls, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemfilesList not implemented")
}
func (UnimplementedSliverRPCServer) MemfilesAdd(context.Context, *glodpb.MemfilesAddReq) (*glodpb.MemfilesAdd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemfilesAdd not implemented")
}
func (UnimplementedSliverRPCServer) MemfilesRm(context.Context, *glodpb.MemfilesRmReq) (*glodpb.MemfilesRm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemfilesRm not implemented")
}
func (UnimplementedSliverRPCServer) ProcessDump(context.Context, *glodpb.ProcessDumpReq) (*glodpb.ProcessDump, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDump not implemented")
}
func (UnimplementedSliverRPCServer) RunAs(context.Context, *glodpb.RunAsReq) (*glodpb.RunAs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunAs not implemented")
}
func (UnimplementedSliverRPCServer) Impersonate(context.Context, *glodpb.ImpersonateReq) (*glodpb.Impersonate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Impersonate not implemented")
}
func (UnimplementedSliverRPCServer) RevToSelf(context.Context, *glodpb.RevToSelfReq) (*glodpb.RevToSelf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevToSelf not implemented")
}
func (UnimplementedSliverRPCServer) GetSystem(context.Context, *clientpb.GetSystemReq) (*glodpb.GetSystem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystem not implemented")
}
func (UnimplementedSliverRPCServer) Task(context.Context, *glodpb.TaskReq) (*glodpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Task not implemented")
}
func (UnimplementedSliverRPCServer) Msf(context.Context, *clientpb.MSFReq) (*glodpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Msf not implemented")
}
func (UnimplementedSliverRPCServer) MsfRemote(context.Context, *clientpb.MSFRemoteReq) (*glodpb.Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsfRemote not implemented")
}
func (UnimplementedSliverRPCServer) ExecuteAssembly(context.Context, *glodpb.ExecuteAssemblyReq) (*glodpb.ExecuteAssembly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAssembly not implemented")
}
func (UnimplementedSliverRPCServer) Migrate(context.Context, *clientpb.MigrateReq) (*glodpb.Migrate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Migrate not implemented")
}
func (UnimplementedSliverRPCServer) Execute(context.Context, *glodpb.ExecuteReq) (*glodpb.Execute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedSliverRPCServer) ExecuteWindows(context.Context, *glodpb.ExecuteWindowsReq) (*glodpb.Execute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteWindows not implemented")
}
func (UnimplementedSliverRPCServer) Sideload(context.Context, *glodpb.SideloadReq) (*glodpb.Sideload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sideload not implemented")
}
func (UnimplementedSliverRPCServer) SpawnDll(context.Context, *glodpb.InvokeSpawnDllReq) (*glodpb.SpawnDll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpawnDll not implemented")
}
func (UnimplementedSliverRPCServer) Screenshot(context.Context, *glodpb.ScreenshotReq) (*glodpb.Screenshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Screenshot not implemented")
}
func (UnimplementedSliverRPCServer) CurrentTokenOwner(context.Context, *glodpb.CurrentTokenOwnerReq) (*glodpb.CurrentTokenOwner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentTokenOwner not implemented")
}
func (UnimplementedSliverRPCServer) PivotStartListener(context.Context, *glodpb.PivotStartListenerReq) (*glodpb.PivotListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PivotStartListener not implemented")
}
func (UnimplementedSliverRPCServer) PivotStopListener(context.Context, *glodpb.PivotStopListenerReq) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PivotStopListener not implemented")
}
func (UnimplementedSliverRPCServer) PivotSessionListeners(context.Context, *glodpb.PivotListenersReq) (*glodpb.PivotListeners, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PivotSessionListeners not implemented")
}
func (UnimplementedSliverRPCServer) PivotGraph(context.Context, *commonpb.Empty) (*clientpb.PivotGraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PivotGraph not implemented")
}
func (UnimplementedSliverRPCServer) StartService(context.Context, *glodpb.StartServiceReq) (*glodpb.ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartService not implemented")
}
func (UnimplementedSliverRPCServer) StopService(context.Context, *glodpb.StopServiceReq) (*glodpb.ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopService not implemented")
}
func (UnimplementedSliverRPCServer) RemoveService(context.Context, *glodpb.RemoveServiceReq) (*glodpb.ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveService not implemented")
}
func (UnimplementedSliverRPCServer) MakeToken(context.Context, *glodpb.MakeTokenReq) (*glodpb.MakeToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeToken not implemented")
}
func (UnimplementedSliverRPCServer) GetEnv(context.Context, *glodpb.EnvReq) (*glodpb.EnvInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnv not implemented")
}
func (UnimplementedSliverRPCServer) SetEnv(context.Context, *glodpb.SetEnvReq) (*glodpb.SetEnv, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnv not implemented")
}
func (UnimplementedSliverRPCServer) UnsetEnv(context.Context, *glodpb.UnsetEnvReq) (*glodpb.UnsetEnv, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetEnv not implemented")
}
func (UnimplementedSliverRPCServer) Backdoor(context.Context, *glodpb.BackdoorReq) (*glodpb.Backdoor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backdoor not implemented")
}
func (UnimplementedSliverRPCServer) RegistryRead(context.Context, *glodpb.RegistryReadReq) (*glodpb.RegistryRead, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryRead not implemented")
}
func (UnimplementedSliverRPCServer) RegistryWrite(context.Context, *glodpb.RegistryWriteReq) (*glodpb.RegistryWrite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryWrite not implemented")
}
func (UnimplementedSliverRPCServer) RegistryCreateKey(context.Context, *glodpb.RegistryCreateKeyReq) (*glodpb.RegistryCreateKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryCreateKey not implemented")
}
func (UnimplementedSliverRPCServer) RegistryDeleteKey(context.Context, *glodpb.RegistryDeleteKeyReq) (*glodpb.RegistryDeleteKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryDeleteKey not implemented")
}
func (UnimplementedSliverRPCServer) RegistryListSubKeys(context.Context, *glodpb.RegistrySubKeyListReq) (*glodpb.RegistrySubKeyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryListSubKeys not implemented")
}
func (UnimplementedSliverRPCServer) RegistryListValues(context.Context, *glodpb.RegistryListValuesReq) (*glodpb.RegistryValuesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryListValues not implemented")
}
func (UnimplementedSliverRPCServer) RunSSHCommand(context.Context, *glodpb.SSHCommandReq) (*glodpb.SSHCommand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSSHCommand not implemented")
}
func (UnimplementedSliverRPCServer) HijackDLL(context.Context, *clientpb.DllHijackReq) (*clientpb.DllHijack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HijackDLL not implemented")
}
func (UnimplementedSliverRPCServer) GetPrivs(context.Context, *glodpb.GetPrivsReq) (*glodpb.GetPrivs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivs not implemented")
}
func (UnimplementedSliverRPCServer) StartRportFwdListener(context.Context, *glodpb.RportFwdStartListenerReq) (*glodpb.RportFwdListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRportFwdListener not implemented")
}
func (UnimplementedSliverRPCServer) GetRportFwdListeners(context.Context, *glodpb.RportFwdListenersReq) (*glodpb.RportFwdListeners, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRportFwdListeners not implemented")
}
func (UnimplementedSliverRPCServer) StopRportFwdListener(context.Context, *glodpb.RportFwdStopListenerReq) (*glodpb.RportFwdListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRportFwdListener not implemented")
}
func (UnimplementedSliverRPCServer) OpenSession(context.Context, *glodpb.OpenSession) (*glodpb.OpenSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenSession not implemented")
}
func (UnimplementedSliverRPCServer) CloseSession(context.Context, *glodpb.CloseSession) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (UnimplementedSliverRPCServer) RegisterExtension(context.Context, *glodpb.RegisterExtensionReq) (*glodpb.RegisterExtension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterExtension not implemented")
}
func (UnimplementedSliverRPCServer) CallExtension(context.Context, *glodpb.CallExtensionReq) (*glodpb.CallExtension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallExtension not implemented")
}
func (UnimplementedSliverRPCServer) ListExtensions(context.Context, *glodpb.ListExtensionsReq) (*glodpb.ListExtensions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExtensions not implemented")
}
func (UnimplementedSliverRPCServer) WGStartPortForward(context.Context, *glodpb.WGPortForwardStartReq) (*glodpb.WGPortForward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGStartPortForward not implemented")
}
func (UnimplementedSliverRPCServer) WGStopPortForward(context.Context, *glodpb.WGPortForwardStopReq) (*glodpb.WGPortForward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGStopPortForward not implemented")
}
func (UnimplementedSliverRPCServer) WGStartSocks(context.Context, *glodpb.WGSocksStartReq) (*glodpb.WGSocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGStartSocks not implemented")
}
func (UnimplementedSliverRPCServer) WGStopSocks(context.Context, *glodpb.WGSocksStopReq) (*glodpb.WGSocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGStopSocks not implemented")
}
func (UnimplementedSliverRPCServer) WGListForwarders(context.Context, *glodpb.WGTCPForwardersReq) (*glodpb.WGTCPForwarders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGListForwarders not implemented")
}
func (UnimplementedSliverRPCServer) WGListSocksServers(context.Context, *glodpb.WGSocksServersReq) (*glodpb.WGSocksServers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WGListSocksServers not implemented")
}
func (UnimplementedSliverRPCServer) Shell(context.Context, *glodpb.ShellReq) (*glodpb.Shell, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shell not implemented")
}
func (UnimplementedSliverRPCServer) Portfwd(context.Context, *glodpb.PortfwdReq) (*glodpb.Portfwd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Portfwd not implemented")
}
func (UnimplementedSliverRPCServer) CreateSocks(context.Context, *glodpb.Socks) (*glodpb.Socks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSocks not implemented")
}
func (UnimplementedSliverRPCServer) CloseSocks(context.Context, *glodpb.Socks) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSocks not implemented")
}
func (UnimplementedSliverRPCServer) SocksProxy(SliverRPC_SocksProxyServer) error {
	return status.Errorf(codes.Unimplemented, "method SocksProxy not implemented")
}
func (UnimplementedSliverRPCServer) CreateTunnel(context.Context, *glodpb.Tunnel) (*glodpb.Tunnel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (UnimplementedSliverRPCServer) CloseTunnel(context.Context, *glodpb.Tunnel) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTunnel not implemented")
}
func (UnimplementedSliverRPCServer) TunnelData(SliverRPC_TunnelDataServer) error {
	return status.Errorf(codes.Unimplemented, "method TunnelData not implemented")
}
func (UnimplementedSliverRPCServer) Events(*commonpb.Empty, SliverRPC_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedSliverRPCServer) mustEmbedUnimplementedSliverRPCServer() {}

// UnsafeSliverRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SliverRPCServer will
// result in compilation errors.
type UnsafeSliverRPCServer interface {
	mustEmbedUnimplementedSliverRPCServer()
}

func RegisterSliverRPCServer(s grpc.ServiceRegistrar, srv SliverRPCServer) {
	s.RegisterService(&SliverRPC_ServiceDesc, srv)
}

func _SliverRPC_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetVersion(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GetOperators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetOperators(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.KillReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Kill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Kill(ctx, req.(*glodpb.KillReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Reconfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.ReconfigureReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Reconfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Reconfigure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Reconfigure(ctx, req.(*glodpb.ReconfigureReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.RenameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Rename_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Rename(ctx, req.(*clientpb.RenameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GetSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetSessions(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetBeacons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetBeacons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GetBeacons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetBeacons(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Beacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GetBeacon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetBeacon(ctx, req.(*clientpb.Beacon))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RmBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Beacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RmBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_RmBeacon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RmBeacon(ctx, req.(*clientpb.Beacon))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetBeaconTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Beacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetBeaconTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GetBeaconTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetBeaconTasks(ctx, req.(*clientpb.Beacon))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetBeaconTaskContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.BeaconTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetBeaconTaskContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GetBeaconTaskContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetBeaconTaskContent(ctx, req.(*clientpb.BeaconTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_CancelBeaconTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.BeaconTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).CancelBeaconTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_CancelBeaconTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).CancelBeaconTask(ctx, req.(*clientpb.BeaconTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_MonitorStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).MonitorStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_MonitorStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).MonitorStart(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_MonitorStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).MonitorStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_MonitorStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).MonitorStop(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GetJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetJobs(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_KillJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.KillJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).KillJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_KillJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).KillJob(ctx, req.(*clientpb.KillJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartMTLSListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.MTLSListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartMTLSListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_StartMTLSListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartMTLSListener(ctx, req.(*clientpb.MTLSListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartWGListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WGListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartWGListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_StartWGListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartWGListener(ctx, req.(*clientpb.WGListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartDNSListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.DNSListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartDNSListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_StartDNSListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartDNSListener(ctx, req.(*clientpb.DNSListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartHTTPSListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.HTTPListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartHTTPSListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_StartHTTPSListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartHTTPSListener(ctx, req.(*clientpb.HTTPListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartHTTPListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.HTTPListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartHTTPListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_StartHTTPListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartHTTPListener(ctx, req.(*clientpb.HTTPListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartTCPStagerListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.StagerListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartTCPStagerListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_StartTCPStagerListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartTCPStagerListener(ctx, req.(*clientpb.StagerListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartHTTPStagerListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.StagerListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartHTTPStagerListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_StartHTTPStagerListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartHTTPStagerListener(ctx, req.(*clientpb.StagerListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_LootAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).LootAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_LootAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).LootAdd(ctx, req.(*clientpb.Loot))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_LootRm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).LootRm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_LootRm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).LootRm(ctx, req.(*clientpb.Loot))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_LootUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).LootUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_LootUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).LootUpdate(ctx, req.(*clientpb.Loot))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_LootContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).LootContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_LootContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).LootContent(ctx, req.(*clientpb.Loot))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_LootAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).LootAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_LootAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).LootAll(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_LootAllOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Loot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).LootAllOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_LootAllOf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).LootAllOf(ctx, req.(*clientpb.Loot))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Hosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Hosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Hosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Hosts(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Host_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Host(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Host_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Host(ctx, req.(*clientpb.Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_HostRm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).HostRm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_HostRm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).HostRm(ctx, req.(*clientpb.Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_HostIOCRm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.IOC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).HostIOCRm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_HostIOCRm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).HostIOCRm(ctx, req.(*clientpb.IOC))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.GenerateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Generate(ctx, req.(*clientpb.GenerateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GenerateExternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ExternalGenerateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GenerateExternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GenerateExternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GenerateExternal(ctx, req.(*clientpb.ExternalGenerateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GenerateExternalSaveBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ExternalImplantBinary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GenerateExternalSaveBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GenerateExternalSaveBuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GenerateExternalSaveBuild(ctx, req.(*clientpb.ExternalImplantBinary))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GenerateExternalGetImplantConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ImplantConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GenerateExternalGetImplantConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GenerateExternalGetImplantConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GenerateExternalGetImplantConfig(ctx, req.(*clientpb.ImplantConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_BuilderRegister_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(clientpb.Builder)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SliverRPCServer).BuilderRegister(m, &sliverRPCBuilderRegisterServer{stream})
}

type SliverRPC_BuilderRegisterServer interface {
	Send(*clientpb.Event) error
	grpc.ServerStream
}

type sliverRPCBuilderRegisterServer struct {
	grpc.ServerStream
}

func (x *sliverRPCBuilderRegisterServer) Send(m *clientpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _SliverRPC_BuilderTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).BuilderTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_BuilderTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).BuilderTrigger(ctx, req.(*clientpb.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Builders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Builders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Builders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Builders(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Regenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.RegenerateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Regenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Regenerate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Regenerate(ctx, req.(*clientpb.RegenerateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_ImplantBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).ImplantBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_ImplantBuilds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).ImplantBuilds(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_DeleteImplantBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).DeleteImplantBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_DeleteImplantBuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).DeleteImplantBuild(ctx, req.(*clientpb.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Canaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Canaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Canaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Canaries(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GenerateWGClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GenerateWGClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GenerateWGClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GenerateWGClientConfig(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GenerateUniqueIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GenerateUniqueIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GenerateUniqueIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GenerateUniqueIP(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_ImplantProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).ImplantProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_ImplantProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).ImplantProfiles(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_DeleteImplantProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).DeleteImplantProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_DeleteImplantProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).DeleteImplantProfile(ctx, req.(*clientpb.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_SaveImplantProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ImplantProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).SaveImplantProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_SaveImplantProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).SaveImplantProfile(ctx, req.(*clientpb.ImplantProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_MsfStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.MsfStagerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).MsfStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_MsfStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).MsfStage(ctx, req.(*clientpb.MsfStagerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_ShellcodeRDI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ShellcodeRDIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).ShellcodeRDI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_ShellcodeRDI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).ShellcodeRDI(ctx, req.(*clientpb.ShellcodeRDIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetCompiler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetCompiler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GetCompiler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetCompiler(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_ShellcodeEncoder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.ShellcodeEncodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).ShellcodeEncoder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_ShellcodeEncoder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).ShellcodeEncoder(ctx, req.(*clientpb.ShellcodeEncodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_ShellcodeEncoderMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).ShellcodeEncoderMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_ShellcodeEncoderMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).ShellcodeEncoderMap(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Websites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Websites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Websites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Websites(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Website_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Website)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Website(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Website_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Website(ctx, req.(*clientpb.Website))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WebsiteRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.Website)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WebsiteRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_WebsiteRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WebsiteRemove(ctx, req.(*clientpb.Website))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WebsiteAddContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WebsiteAddContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WebsiteAddContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_WebsiteAddContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WebsiteAddContent(ctx, req.(*clientpb.WebsiteAddContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WebsiteUpdateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WebsiteAddContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WebsiteUpdateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_WebsiteUpdateContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WebsiteUpdateContent(ctx, req.(*clientpb.WebsiteAddContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WebsiteRemoveContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.WebsiteRemoveContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WebsiteRemoveContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_WebsiteRemoveContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WebsiteRemoveContent(ctx, req.(*clientpb.WebsiteRemoveContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Ping(ctx, req.(*glodpb.Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Ps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.PsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Ps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Ps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Ps(ctx, req.(*glodpb.PsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.TerminateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Terminate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Terminate(ctx, req.(*glodpb.TerminateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Ifconfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.IfconfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Ifconfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Ifconfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Ifconfig(ctx, req.(*glodpb.IfconfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Netstat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.NetstatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Netstat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Netstat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Netstat(ctx, req.(*glodpb.NetstatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Ls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.LsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Ls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Ls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Ls(ctx, req.(*glodpb.LsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Cd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.CdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Cd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Cd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Cd(ctx, req.(*glodpb.CdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Pwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.PwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Pwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Pwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Pwd(ctx, req.(*glodpb.PwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Mv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.MvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Mv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Mv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Mv(ctx, req.(*glodpb.MvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Rm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.RmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Rm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Rm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Rm(ctx, req.(*glodpb.RmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Mkdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.MkdirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Mkdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Mkdir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Mkdir(ctx, req.(*glodpb.MkdirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.DownloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Download_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Download(ctx, req.(*glodpb.DownloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.UploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Upload(ctx, req.(*glodpb.UploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Chmod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.ChmodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Chmod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Chmod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Chmod(ctx, req.(*glodpb.ChmodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Chown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.ChownReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Chown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Chown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Chown(ctx, req.(*glodpb.ChownReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Chtimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.ChtimesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Chtimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Chtimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Chtimes(ctx, req.(*glodpb.ChtimesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_MemfilesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.MemfilesListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).MemfilesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_MemfilesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).MemfilesList(ctx, req.(*glodpb.MemfilesListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_MemfilesAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.MemfilesAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).MemfilesAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_MemfilesAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).MemfilesAdd(ctx, req.(*glodpb.MemfilesAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_MemfilesRm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.MemfilesRmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).MemfilesRm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_MemfilesRm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).MemfilesRm(ctx, req.(*glodpb.MemfilesRmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_ProcessDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.ProcessDumpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).ProcessDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_ProcessDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).ProcessDump(ctx, req.(*glodpb.ProcessDumpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RunAs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.RunAsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RunAs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_RunAs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RunAs(ctx, req.(*glodpb.RunAsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Impersonate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.ImpersonateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Impersonate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Impersonate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Impersonate(ctx, req.(*glodpb.ImpersonateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RevToSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.RevToSelfReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RevToSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_RevToSelf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RevToSelf(ctx, req.(*glodpb.RevToSelfReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.GetSystemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GetSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetSystem(ctx, req.(*clientpb.GetSystemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Task_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.TaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Task(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Task_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Task(ctx, req.(*glodpb.TaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Msf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.MSFReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Msf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Msf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Msf(ctx, req.(*clientpb.MSFReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_MsfRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.MSFRemoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).MsfRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_MsfRemote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).MsfRemote(ctx, req.(*clientpb.MSFRemoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_ExecuteAssembly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.ExecuteAssemblyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).ExecuteAssembly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_ExecuteAssembly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).ExecuteAssembly(ctx, req.(*glodpb.ExecuteAssemblyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Migrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.MigrateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Migrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Migrate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Migrate(ctx, req.(*clientpb.MigrateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.ExecuteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Execute(ctx, req.(*glodpb.ExecuteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_ExecuteWindows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.ExecuteWindowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).ExecuteWindows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_ExecuteWindows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).ExecuteWindows(ctx, req.(*glodpb.ExecuteWindowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Sideload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.SideloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Sideload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Sideload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Sideload(ctx, req.(*glodpb.SideloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_SpawnDll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.InvokeSpawnDllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).SpawnDll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_SpawnDll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).SpawnDll(ctx, req.(*glodpb.InvokeSpawnDllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Screenshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.ScreenshotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Screenshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Screenshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Screenshot(ctx, req.(*glodpb.ScreenshotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_CurrentTokenOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.CurrentTokenOwnerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).CurrentTokenOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_CurrentTokenOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).CurrentTokenOwner(ctx, req.(*glodpb.CurrentTokenOwnerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_PivotStartListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.PivotStartListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).PivotStartListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_PivotStartListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).PivotStartListener(ctx, req.(*glodpb.PivotStartListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_PivotStopListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.PivotStopListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).PivotStopListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_PivotStopListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).PivotStopListener(ctx, req.(*glodpb.PivotStopListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_PivotSessionListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.PivotListenersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).PivotSessionListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_PivotSessionListeners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).PivotSessionListeners(ctx, req.(*glodpb.PivotListenersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_PivotGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).PivotGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_PivotGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).PivotGraph(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.StartServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_StartService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartService(ctx, req.(*glodpb.StartServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StopService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.StopServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StopService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_StopService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StopService(ctx, req.(*glodpb.StopServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RemoveService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.RemoveServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RemoveService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_RemoveService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RemoveService(ctx, req.(*glodpb.RemoveServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_MakeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.MakeTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).MakeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_MakeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).MakeToken(ctx, req.(*glodpb.MakeTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.EnvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GetEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetEnv(ctx, req.(*glodpb.EnvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_SetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.SetEnvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).SetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_SetEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).SetEnv(ctx, req.(*glodpb.SetEnvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_UnsetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.UnsetEnvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).UnsetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_UnsetEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).UnsetEnv(ctx, req.(*glodpb.UnsetEnvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Backdoor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.BackdoorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Backdoor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Backdoor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Backdoor(ctx, req.(*glodpb.BackdoorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RegistryRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.RegistryReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RegistryRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_RegistryRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RegistryRead(ctx, req.(*glodpb.RegistryReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RegistryWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.RegistryWriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RegistryWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_RegistryWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RegistryWrite(ctx, req.(*glodpb.RegistryWriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RegistryCreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.RegistryCreateKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RegistryCreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_RegistryCreateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RegistryCreateKey(ctx, req.(*glodpb.RegistryCreateKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RegistryDeleteKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.RegistryDeleteKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RegistryDeleteKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_RegistryDeleteKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RegistryDeleteKey(ctx, req.(*glodpb.RegistryDeleteKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RegistryListSubKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.RegistrySubKeyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RegistryListSubKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_RegistryListSubKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RegistryListSubKeys(ctx, req.(*glodpb.RegistrySubKeyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RegistryListValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.RegistryListValuesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RegistryListValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_RegistryListValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RegistryListValues(ctx, req.(*glodpb.RegistryListValuesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RunSSHCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.SSHCommandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RunSSHCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_RunSSHCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RunSSHCommand(ctx, req.(*glodpb.SSHCommandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_HijackDLL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(clientpb.DllHijackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).HijackDLL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_HijackDLL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).HijackDLL(ctx, req.(*clientpb.DllHijackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetPrivs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.GetPrivsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetPrivs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GetPrivs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetPrivs(ctx, req.(*glodpb.GetPrivsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StartRportFwdListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.RportFwdStartListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StartRportFwdListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_StartRportFwdListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StartRportFwdListener(ctx, req.(*glodpb.RportFwdStartListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_GetRportFwdListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.RportFwdListenersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).GetRportFwdListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_GetRportFwdListeners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).GetRportFwdListeners(ctx, req.(*glodpb.RportFwdListenersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_StopRportFwdListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.RportFwdStopListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).StopRportFwdListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_StopRportFwdListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).StopRportFwdListener(ctx, req.(*glodpb.RportFwdStopListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_OpenSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.OpenSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).OpenSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_OpenSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).OpenSession(ctx, req.(*glodpb.OpenSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.CloseSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_CloseSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).CloseSession(ctx, req.(*glodpb.CloseSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_RegisterExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.RegisterExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).RegisterExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_RegisterExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).RegisterExtension(ctx, req.(*glodpb.RegisterExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_CallExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.CallExtensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).CallExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_CallExtension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).CallExtension(ctx, req.(*glodpb.CallExtensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_ListExtensions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.ListExtensionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).ListExtensions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_ListExtensions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).ListExtensions(ctx, req.(*glodpb.ListExtensionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WGStartPortForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.WGPortForwardStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WGStartPortForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_WGStartPortForward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WGStartPortForward(ctx, req.(*glodpb.WGPortForwardStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WGStopPortForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.WGPortForwardStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WGStopPortForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_WGStopPortForward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WGStopPortForward(ctx, req.(*glodpb.WGPortForwardStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WGStartSocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.WGSocksStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WGStartSocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_WGStartSocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WGStartSocks(ctx, req.(*glodpb.WGSocksStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WGStopSocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.WGSocksStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WGStopSocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_WGStopSocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WGStopSocks(ctx, req.(*glodpb.WGSocksStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WGListForwarders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.WGTCPForwardersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WGListForwarders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_WGListForwarders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WGListForwarders(ctx, req.(*glodpb.WGTCPForwardersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_WGListSocksServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.WGSocksServersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).WGListSocksServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_WGListSocksServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).WGListSocksServers(ctx, req.(*glodpb.WGSocksServersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Shell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.ShellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Shell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Shell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Shell(ctx, req.(*glodpb.ShellReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_Portfwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.PortfwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).Portfwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_Portfwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).Portfwd(ctx, req.(*glodpb.PortfwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_CreateSocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.Socks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).CreateSocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_CreateSocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).CreateSocks(ctx, req.(*glodpb.Socks))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_CloseSocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.Socks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).CloseSocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_CloseSocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).CloseSocks(ctx, req.(*glodpb.Socks))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_SocksProxy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SliverRPCServer).SocksProxy(&sliverRPCSocksProxyServer{stream})
}

type SliverRPC_SocksProxyServer interface {
	Send(*glodpb.SocksData) error
	Recv() (*glodpb.SocksData, error)
	grpc.ServerStream
}

type sliverRPCSocksProxyServer struct {
	grpc.ServerStream
}

func (x *sliverRPCSocksProxyServer) Send(m *glodpb.SocksData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sliverRPCSocksProxyServer) Recv() (*glodpb.SocksData, error) {
	m := new(glodpb.SocksData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SliverRPC_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.Tunnel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_CreateTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).CreateTunnel(ctx, req.(*glodpb.Tunnel))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_CloseTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(glodpb.Tunnel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SliverRPCServer).CloseTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SliverRPC_CloseTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SliverRPCServer).CloseTunnel(ctx, req.(*glodpb.Tunnel))
	}
	return interceptor(ctx, in, info, handler)
}

func _SliverRPC_TunnelData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SliverRPCServer).TunnelData(&sliverRPCTunnelDataServer{stream})
}

type SliverRPC_TunnelDataServer interface {
	Send(*glodpb.TunnelData) error
	Recv() (*glodpb.TunnelData, error)
	grpc.ServerStream
}

type sliverRPCTunnelDataServer struct {
	grpc.ServerStream
}

func (x *sliverRPCTunnelDataServer) Send(m *glodpb.TunnelData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sliverRPCTunnelDataServer) Recv() (*glodpb.TunnelData, error) {
	m := new(glodpb.TunnelData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SliverRPC_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(commonpb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SliverRPCServer).Events(m, &sliverRPCEventsServer{stream})
}

type SliverRPC_EventsServer interface {
	Send(*clientpb.Event) error
	grpc.ServerStream
}

type sliverRPCEventsServer struct {
	grpc.ServerStream
}

func (x *sliverRPCEventsServer) Send(m *clientpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

// SliverRPC_ServiceDesc is the grpc.ServiceDesc for SliverRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SliverRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcpb.SliverRPC",
	HandlerType: (*SliverRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _SliverRPC_GetVersion_Handler,
		},
		{
			MethodName: "GetOperators",
			Handler:    _SliverRPC_GetOperators_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _SliverRPC_Kill_Handler,
		},
		{
			MethodName: "Reconfigure",
			Handler:    _SliverRPC_Reconfigure_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _SliverRPC_Rename_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _SliverRPC_GetSessions_Handler,
		},
		{
			MethodName: "GetBeacons",
			Handler:    _SliverRPC_GetBeacons_Handler,
		},
		{
			MethodName: "GetBeacon",
			Handler:    _SliverRPC_GetBeacon_Handler,
		},
		{
			MethodName: "RmBeacon",
			Handler:    _SliverRPC_RmBeacon_Handler,
		},
		{
			MethodName: "GetBeaconTasks",
			Handler:    _SliverRPC_GetBeaconTasks_Handler,
		},
		{
			MethodName: "GetBeaconTaskContent",
			Handler:    _SliverRPC_GetBeaconTaskContent_Handler,
		},
		{
			MethodName: "CancelBeaconTask",
			Handler:    _SliverRPC_CancelBeaconTask_Handler,
		},
		{
			MethodName: "MonitorStart",
			Handler:    _SliverRPC_MonitorStart_Handler,
		},
		{
			MethodName: "MonitorStop",
			Handler:    _SliverRPC_MonitorStop_Handler,
		},
		{
			MethodName: "GetJobs",
			Handler:    _SliverRPC_GetJobs_Handler,
		},
		{
			MethodName: "KillJob",
			Handler:    _SliverRPC_KillJob_Handler,
		},
		{
			MethodName: "StartMTLSListener",
			Handler:    _SliverRPC_StartMTLSListener_Handler,
		},
		{
			MethodName: "StartWGListener",
			Handler:    _SliverRPC_StartWGListener_Handler,
		},
		{
			MethodName: "StartDNSListener",
			Handler:    _SliverRPC_StartDNSListener_Handler,
		},
		{
			MethodName: "StartHTTPSListener",
			Handler:    _SliverRPC_StartHTTPSListener_Handler,
		},
		{
			MethodName: "StartHTTPListener",
			Handler:    _SliverRPC_StartHTTPListener_Handler,
		},
		{
			MethodName: "StartTCPStagerListener",
			Handler:    _SliverRPC_StartTCPStagerListener_Handler,
		},
		{
			MethodName: "StartHTTPStagerListener",
			Handler:    _SliverRPC_StartHTTPStagerListener_Handler,
		},
		{
			MethodName: "LootAdd",
			Handler:    _SliverRPC_LootAdd_Handler,
		},
		{
			MethodName: "LootRm",
			Handler:    _SliverRPC_LootRm_Handler,
		},
		{
			MethodName: "LootUpdate",
			Handler:    _SliverRPC_LootUpdate_Handler,
		},
		{
			MethodName: "LootContent",
			Handler:    _SliverRPC_LootContent_Handler,
		},
		{
			MethodName: "LootAll",
			Handler:    _SliverRPC_LootAll_Handler,
		},
		{
			MethodName: "LootAllOf",
			Handler:    _SliverRPC_LootAllOf_Handler,
		},
		{
			MethodName: "Hosts",
			Handler:    _SliverRPC_Hosts_Handler,
		},
		{
			MethodName: "Host",
			Handler:    _SliverRPC_Host_Handler,
		},
		{
			MethodName: "HostRm",
			Handler:    _SliverRPC_HostRm_Handler,
		},
		{
			MethodName: "HostIOCRm",
			Handler:    _SliverRPC_HostIOCRm_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _SliverRPC_Generate_Handler,
		},
		{
			MethodName: "GenerateExternal",
			Handler:    _SliverRPC_GenerateExternal_Handler,
		},
		{
			MethodName: "GenerateExternalSaveBuild",
			Handler:    _SliverRPC_GenerateExternalSaveBuild_Handler,
		},
		{
			MethodName: "GenerateExternalGetImplantConfig",
			Handler:    _SliverRPC_GenerateExternalGetImplantConfig_Handler,
		},
		{
			MethodName: "BuilderTrigger",
			Handler:    _SliverRPC_BuilderTrigger_Handler,
		},
		{
			MethodName: "Builders",
			Handler:    _SliverRPC_Builders_Handler,
		},
		{
			MethodName: "Regenerate",
			Handler:    _SliverRPC_Regenerate_Handler,
		},
		{
			MethodName: "ImplantBuilds",
			Handler:    _SliverRPC_ImplantBuilds_Handler,
		},
		{
			MethodName: "DeleteImplantBuild",
			Handler:    _SliverRPC_DeleteImplantBuild_Handler,
		},
		{
			MethodName: "Canaries",
			Handler:    _SliverRPC_Canaries_Handler,
		},
		{
			MethodName: "GenerateWGClientConfig",
			Handler:    _SliverRPC_GenerateWGClientConfig_Handler,
		},
		{
			MethodName: "GenerateUniqueIP",
			Handler:    _SliverRPC_GenerateUniqueIP_Handler,
		},
		{
			MethodName: "ImplantProfiles",
			Handler:    _SliverRPC_ImplantProfiles_Handler,
		},
		{
			MethodName: "DeleteImplantProfile",
			Handler:    _SliverRPC_DeleteImplantProfile_Handler,
		},
		{
			MethodName: "SaveImplantProfile",
			Handler:    _SliverRPC_SaveImplantProfile_Handler,
		},
		{
			MethodName: "MsfStage",
			Handler:    _SliverRPC_MsfStage_Handler,
		},
		{
			MethodName: "ShellcodeRDI",
			Handler:    _SliverRPC_ShellcodeRDI_Handler,
		},
		{
			MethodName: "GetCompiler",
			Handler:    _SliverRPC_GetCompiler_Handler,
		},
		{
			MethodName: "ShellcodeEncoder",
			Handler:    _SliverRPC_ShellcodeEncoder_Handler,
		},
		{
			MethodName: "ShellcodeEncoderMap",
			Handler:    _SliverRPC_ShellcodeEncoderMap_Handler,
		},
		{
			MethodName: "Websites",
			Handler:    _SliverRPC_Websites_Handler,
		},
		{
			MethodName: "Website",
			Handler:    _SliverRPC_Website_Handler,
		},
		{
			MethodName: "WebsiteRemove",
			Handler:    _SliverRPC_WebsiteRemove_Handler,
		},
		{
			MethodName: "WebsiteAddContent",
			Handler:    _SliverRPC_WebsiteAddContent_Handler,
		},
		{
			MethodName: "WebsiteUpdateContent",
			Handler:    _SliverRPC_WebsiteUpdateContent_Handler,
		},
		{
			MethodName: "WebsiteRemoveContent",
			Handler:    _SliverRPC_WebsiteRemoveContent_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SliverRPC_Ping_Handler,
		},
		{
			MethodName: "Ps",
			Handler:    _SliverRPC_Ps_Handler,
		},
		{
			MethodName: "Terminate",
			Handler:    _SliverRPC_Terminate_Handler,
		},
		{
			MethodName: "Ifconfig",
			Handler:    _SliverRPC_Ifconfig_Handler,
		},
		{
			MethodName: "Netstat",
			Handler:    _SliverRPC_Netstat_Handler,
		},
		{
			MethodName: "Ls",
			Handler:    _SliverRPC_Ls_Handler,
		},
		{
			MethodName: "Cd",
			Handler:    _SliverRPC_Cd_Handler,
		},
		{
			MethodName: "Pwd",
			Handler:    _SliverRPC_Pwd_Handler,
		},
		{
			MethodName: "Mv",
			Handler:    _SliverRPC_Mv_Handler,
		},
		{
			MethodName: "Rm",
			Handler:    _SliverRPC_Rm_Handler,
		},
		{
			MethodName: "Mkdir",
			Handler:    _SliverRPC_Mkdir_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _SliverRPC_Download_Handler,
		},
		{
			MethodName: "Upload",
			Handler:    _SliverRPC_Upload_Handler,
		},
		{
			MethodName: "Chmod",
			Handler:    _SliverRPC_Chmod_Handler,
		},
		{
			MethodName: "Chown",
			Handler:    _SliverRPC_Chown_Handler,
		},
		{
			MethodName: "Chtimes",
			Handler:    _SliverRPC_Chtimes_Handler,
		},
		{
			MethodName: "MemfilesList",
			Handler:    _SliverRPC_MemfilesList_Handler,
		},
		{
			MethodName: "MemfilesAdd",
			Handler:    _SliverRPC_MemfilesAdd_Handler,
		},
		{
			MethodName: "MemfilesRm",
			Handler:    _SliverRPC_MemfilesRm_Handler,
		},
		{
			MethodName: "ProcessDump",
			Handler:    _SliverRPC_ProcessDump_Handler,
		},
		{
			MethodName: "RunAs",
			Handler:    _SliverRPC_RunAs_Handler,
		},
		{
			MethodName: "Impersonate",
			Handler:    _SliverRPC_Impersonate_Handler,
		},
		{
			MethodName: "RevToSelf",
			Handler:    _SliverRPC_RevToSelf_Handler,
		},
		{
			MethodName: "GetSystem",
			Handler:    _SliverRPC_GetSystem_Handler,
		},
		{
			MethodName: "Task",
			Handler:    _SliverRPC_Task_Handler,
		},
		{
			MethodName: "Msf",
			Handler:    _SliverRPC_Msf_Handler,
		},
		{
			MethodName: "MsfRemote",
			Handler:    _SliverRPC_MsfRemote_Handler,
		},
		{
			MethodName: "ExecuteAssembly",
			Handler:    _SliverRPC_ExecuteAssembly_Handler,
		},
		{
			MethodName: "Migrate",
			Handler:    _SliverRPC_Migrate_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _SliverRPC_Execute_Handler,
		},
		{
			MethodName: "ExecuteWindows",
			Handler:    _SliverRPC_ExecuteWindows_Handler,
		},
		{
			MethodName: "Sideload",
			Handler:    _SliverRPC_Sideload_Handler,
		},
		{
			MethodName: "SpawnDll",
			Handler:    _SliverRPC_SpawnDll_Handler,
		},
		{
			MethodName: "Screenshot",
			Handler:    _SliverRPC_Screenshot_Handler,
		},
		{
			MethodName: "CurrentTokenOwner",
			Handler:    _SliverRPC_CurrentTokenOwner_Handler,
		},
		{
			MethodName: "PivotStartListener",
			Handler:    _SliverRPC_PivotStartListener_Handler,
		},
		{
			MethodName: "PivotStopListener",
			Handler:    _SliverRPC_PivotStopListener_Handler,
		},
		{
			MethodName: "PivotSessionListeners",
			Handler:    _SliverRPC_PivotSessionListeners_Handler,
		},
		{
			MethodName: "PivotGraph",
			Handler:    _SliverRPC_PivotGraph_Handler,
		},
		{
			MethodName: "StartService",
			Handler:    _SliverRPC_StartService_Handler,
		},
		{
			MethodName: "StopService",
			Handler:    _SliverRPC_StopService_Handler,
		},
		{
			MethodName: "RemoveService",
			Handler:    _SliverRPC_RemoveService_Handler,
		},
		{
			MethodName: "MakeToken",
			Handler:    _SliverRPC_MakeToken_Handler,
		},
		{
			MethodName: "GetEnv",
			Handler:    _SliverRPC_GetEnv_Handler,
		},
		{
			MethodName: "SetEnv",
			Handler:    _SliverRPC_SetEnv_Handler,
		},
		{
			MethodName: "UnsetEnv",
			Handler:    _SliverRPC_UnsetEnv_Handler,
		},
		{
			MethodName: "Backdoor",
			Handler:    _SliverRPC_Backdoor_Handler,
		},
		{
			MethodName: "RegistryRead",
			Handler:    _SliverRPC_RegistryRead_Handler,
		},
		{
			MethodName: "RegistryWrite",
			Handler:    _SliverRPC_RegistryWrite_Handler,
		},
		{
			MethodName: "RegistryCreateKey",
			Handler:    _SliverRPC_RegistryCreateKey_Handler,
		},
		{
			MethodName: "RegistryDeleteKey",
			Handler:    _SliverRPC_RegistryDeleteKey_Handler,
		},
		{
			MethodName: "RegistryListSubKeys",
			Handler:    _SliverRPC_RegistryListSubKeys_Handler,
		},
		{
			MethodName: "RegistryListValues",
			Handler:    _SliverRPC_RegistryListValues_Handler,
		},
		{
			MethodName: "RunSSHCommand",
			Handler:    _SliverRPC_RunSSHCommand_Handler,
		},
		{
			MethodName: "HijackDLL",
			Handler:    _SliverRPC_HijackDLL_Handler,
		},
		{
			MethodName: "GetPrivs",
			Handler:    _SliverRPC_GetPrivs_Handler,
		},
		{
			MethodName: "StartRportFwdListener",
			Handler:    _SliverRPC_StartRportFwdListener_Handler,
		},
		{
			MethodName: "GetRportFwdListeners",
			Handler:    _SliverRPC_GetRportFwdListeners_Handler,
		},
		{
			MethodName: "StopRportFwdListener",
			Handler:    _SliverRPC_StopRportFwdListener_Handler,
		},
		{
			MethodName: "OpenSession",
			Handler:    _SliverRPC_OpenSession_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _SliverRPC_CloseSession_Handler,
		},
		{
			MethodName: "RegisterExtension",
			Handler:    _SliverRPC_RegisterExtension_Handler,
		},
		{
			MethodName: "CallExtension",
			Handler:    _SliverRPC_CallExtension_Handler,
		},
		{
			MethodName: "ListExtensions",
			Handler:    _SliverRPC_ListExtensions_Handler,
		},
		{
			MethodName: "WGStartPortForward",
			Handler:    _SliverRPC_WGStartPortForward_Handler,
		},
		{
			MethodName: "WGStopPortForward",
			Handler:    _SliverRPC_WGStopPortForward_Handler,
		},
		{
			MethodName: "WGStartSocks",
			Handler:    _SliverRPC_WGStartSocks_Handler,
		},
		{
			MethodName: "WGStopSocks",
			Handler:    _SliverRPC_WGStopSocks_Handler,
		},
		{
			MethodName: "WGListForwarders",
			Handler:    _SliverRPC_WGListForwarders_Handler,
		},
		{
			MethodName: "WGListSocksServers",
			Handler:    _SliverRPC_WGListSocksServers_Handler,
		},
		{
			MethodName: "Shell",
			Handler:    _SliverRPC_Shell_Handler,
		},
		{
			MethodName: "Portfwd",
			Handler:    _SliverRPC_Portfwd_Handler,
		},
		{
			MethodName: "CreateSocks",
			Handler:    _SliverRPC_CreateSocks_Handler,
		},
		{
			MethodName: "CloseSocks",
			Handler:    _SliverRPC_CloseSocks_Handler,
		},
		{
			MethodName: "CreateTunnel",
			Handler:    _SliverRPC_CreateTunnel_Handler,
		},
		{
			MethodName: "CloseTunnel",
			Handler:    _SliverRPC_CloseTunnel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BuilderRegister",
			Handler:       _SliverRPC_BuilderRegister_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SocksProxy",
			Handler:       _SliverRPC_SocksProxy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TunnelData",
			Handler:       _SliverRPC_TunnelData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Events",
			Handler:       _SliverRPC_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpcpb/services.proto",
}
